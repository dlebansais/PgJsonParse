namespace Translator;

using System.Collections.Generic;
using PgObjects;

public partial class CombatParser
{
    public static readonly Dictionary<int, string> DamageTypeTextMap = new Dictionary<int, string>()
    {
        { (int)GameDamageType.Internal_None, string.Empty },
        { (int)GameDamageType.Crushing, "Crushing" },
        { (int)GameDamageType.Slashing, "Slashing" },
        { (int)GameDamageType.Nature, "Nature" },
        { (int)GameDamageType.Fire, "Fire" },
        { (int)GameDamageType.Cold, "Cold" },
        { (int)GameDamageType.Piercing, "Piercing" },
        { (int)GameDamageType.Psychic, "Psychic" },
        { (int)GameDamageType.Trauma, "Trauma" },
        { (int)GameDamageType.Electricity, "Electricity" },
        { (int)GameDamageType.Poison, "Poison" },
        { (int)GameDamageType.Acid, "Acid" },
        { (int)GameDamageType.Darkness, "Darkness" },
        //{ (int)GameDamageType.Demonic, "Demonic" },
    };

    public static readonly Dictionary<int, string> SkillTextMap = new Dictionary<int, string>()
    {
        { (int)GameCombatSkill.Internal_None, string.Empty },
        { (int)GameCombatSkill.Sword, "Sword" },
        { (int)GameCombatSkill.FireMagic, "Fire Magic" },
        { (int)GameCombatSkill.Unarmed, "Unarmed" },
        { (int)GameCombatSkill.Psychology, "Psychology" },
        { (int)GameCombatSkill.Staff, "Staff" },
        { (int)GameCombatSkill.Mentalism, "Mentalism" },
        { (int)GameCombatSkill.Archery, "Archery" },
        { (int)GameCombatSkill.Shield, "Shield" },
        { (int)GameCombatSkill.AnimalHandling, "Animal Handling" },
        { (int)GameCombatSkill.Knife, "Knife" },
        { (int)GameCombatSkill.Cow, "Cow" },
        { (int)GameCombatSkill.Deer, "Deer" },
        { (int)GameCombatSkill.Pig, "Pig" },
        { (int)GameCombatSkill.Spider, "Spider" },
        { (int)GameCombatSkill.Werewolf, "Werewolf" },
        { (int)GameCombatSkill.BattleChemistry, "Battle Chemistry" },
        { (int)GameCombatSkill.Necromancy, "Necromancy" },
        { (int)GameCombatSkill.Hammer, "Hammer" },
        { (int)GameCombatSkill.Druid, "Druid" },
        { (int)GameCombatSkill.IceMagic, "Ice Magic" },
        { (int)GameCombatSkill.GiantBat, "Giant Bat" },

        // { (int)GameCombatSkill.Axe, "Axe" },
        { (int)GameCombatSkill.Bard, "Bard" },
        { (int)GameCombatSkill.Rabbit, "Rabbit" },
        { (int)GameCombatSkill.Priest, "Priest" },
        { (int)GameCombatSkill.Warden, "Warden" },

        // { (int)GameCombatSkill.FairyMagic, "Fairy Magic" },
        { (int)GameCombatSkill.Lycanthropy, "Lycanthropy" },
        { (int)GameCombatSkill.SpiritFox, "Spirit Fox" },
    };

    public static readonly Dictionary<int, string> SongMap = new Dictionary<int, string>()
    {
        { (int)AbilityKeyword.SongOfBravery, "Song Of Bravery" },
        { (int)AbilityKeyword.SongOfDiscord, "Song Of Discord" },
        { (int)AbilityKeyword.SongOfResurgence, "Song Of Resurgence" },
    };

    private static List<Sentence> SentenceList = new List<Sentence>()
    {
        new Sentence("Place an extra trap", CombatKeyword.AnotherTrap),
        new Sentence("Target's Critical Hit Chance reduced by %f", CombatKeyword.AddCriticalChance, SignInterpretation.Opposite),
        new Sentence("Chance to critically-hit is reduced by %f", CombatKeyword.AddCriticalChance, SignInterpretation.Opposite),
        new Sentence("%f chance to crit", CombatKeyword.AddCriticalChance),
        new Sentence("%f Crit Chance", CombatKeyword.AddCriticalChance),
        new Sentence("Mend a broken bone", CombatKeyword.MendBrokenBone),
        new Sentence("Turn while leaping", CombatKeyword.FreeMovementLeaping),
        new Sentence("Free-form movement while leaping", CombatKeyword.FreeMovementLeaping),
        new Sentence("Repeated castings on same target", CombatKeyword.RepeatedCasting),
        new Sentence("Exhilarates on the same target", CombatKeyword.RepeatedCasting),
        new Sentence("Boost Jump Height", CombatKeyword.BoostJumpHeight),
        new Sentence("Shuffling their hatred", CombatKeyword.ShuffleTaunt),
        new Sentence("Target ignore you", CombatKeyword.Ignored),
        new Sentence("Cause the target to ignore you", CombatKeyword.Ignored),
        new Sentence("Uniformly diminishes all targets' entire aggro lists by %f", CombatKeyword.ChangeTaunt),
        new Sentence("This absorbed damage is added to your next @ attack at a %f rate", CombatKeyword.ReturnDamage),
        new Sentence("This absorbed damage is added to your next @", CombatKeyword.ReturnDamage),
        new Sentence("Boost your next attack %f", new List<CombatKeyword>() { CombatKeyword.DamageBoost, CombatKeyword.NextAttack }),
        new Sentence("Future @ attack damage %f", new List<CombatKeyword>() { CombatKeyword.DamageBoost, CombatKeyword.NextAttack }),
        new Sentence("Boost the damage of @ by %f", new List<CombatKeyword>() { CombatKeyword.DamageBoost }),
        new Sentence("Boost the damage of future @ attack by %f", new List<CombatKeyword>() { CombatKeyword.DamageBoost, CombatKeyword.NextAttack }),
        new Sentence("Until %f damage is mitigated", CombatKeyword.MitigationLimit),
        new Sentence("Until it has absorbed a total of %f damage", CombatKeyword.MitigationLimit),
        new Sentence("Until it has absorbed %f total damage", CombatKeyword.MitigationLimit),
        new Sentence("Up to a maximum of %f total mitigated damage", CombatKeyword.MitigationLimit),
        new Sentence("(Randomly determined for each attack)", CombatKeyword.RandomDamage),
        new Sentence("(Randomly determined)", CombatKeyword.RandomDamage),
        new Sentence("(Random)", CombatKeyword.RandomDamage),
        new Sentence("If it is a #D attack", CombatKeyword.IfDamageType),
        new Sentence("If it deal #D damage", CombatKeyword.IfDamageType),
        new Sentence("Deal %f Direct health damage", CombatKeyword.DealDirectHealthDamage),
        new Sentence("Gain %f Direct Elite Vulnerability", new List<CombatKeyword>() { CombatKeyword.AddMitigationDirect, CombatKeyword.TargetElite }, SignInterpretation.Opposite),
        new Sentence("Gain %f Direct", CombatKeyword.DirectOnlyDamageBoost),
        new Sentence("Deal %f Direct", CombatKeyword.DirectOnlyDamageBoost),
        new Sentence("#D damage for your next attack", new List<CombatKeyword>() { CombatKeyword.IfDamageType, CombatKeyword.NextAttack }),
        //new Sentence("Terrifies the target", CombatKeyword.Fear),
        //new Sentence("Terrifies target", CombatKeyword.Fear),
        new Sentence("Cause all sentient targets to flee in terror", CombatKeyword.FearSentient),
        new Sentence("Trigger the target's Vulnerability", CombatKeyword.SetVulnerable),
        new Sentence("To Arthropods", CombatKeyword.TargetAnatomyArthropods),
        new Sentence("To Undead", CombatKeyword.TargetUndead),
        new Sentence("On an undead target", CombatKeyword.TargetUndead),
        new Sentence("Vs Undead", CombatKeyword.TargetUndead),
        new Sentence("To Aberration", CombatKeyword.TargetAnatomyAbberation),
        new Sentence("Vs Elite", CombatKeyword.TargetElite),
        new Sentence("If target is Elite or Boss", CombatKeyword.TargetElite),
        new Sentence("If target is Elite", CombatKeyword.TargetElite),
        new Sentence("To Elite targets", CombatKeyword.TargetElite),
        new Sentence("Vs Fish-anatomy creatures", CombatKeyword.TargetFishAndSnail),
        new Sentence("To non-Elite target", CombatKeyword.TargetNotElite),
        new Sentence("To non-Elite enemies", CombatKeyword.TargetNotElite),
        new Sentence("To Vulnerable target", CombatKeyword.TargetVulnerable),
        new Sentence("To sentient creatures", CombatKeyword.TargetSentient),
        new Sentence("If the target is Vulnerable", CombatKeyword.TargetVulnerable),
        new Sentence("If target is Vulnerable", CombatKeyword.TargetVulnerable),
        new Sentence("Is used on a Vulnerable target", CombatKeyword.TargetVulnerable),
        new Sentence("Both you and your pet", CombatKeyword.ApplyToPetAndMaster),
        new Sentence("Your pet's", CombatKeyword.ApplyToPet),
        new Sentence("Your pet gain", CombatKeyword.ApplyToPet),
        new Sentence("Give your pet", CombatKeyword.ApplyToPet),
        new Sentence("Grant your pet", CombatKeyword.ApplyToPet),
        new Sentence("To your pet", CombatKeyword.ApplyToPet),
        new Sentence("To your undead", CombatKeyword.ApplyToPet),
        new Sentence("To the same target", CombatKeyword.SameTarget),
        new Sentence("To you and your allies", CombatKeyword.ApplyToAllies),
        new Sentence("Affects caster as well as allies", CombatKeyword.ApplyToAllies),
        new Sentence("To YOU", CombatKeyword.TargetSelf),
        new Sentence("If target is covered", CombatKeyword.TargetUnderEffect),
        new Sentence("To targets that are covered", CombatKeyword.TargetUnderEffect),
        new Sentence("To targets that are Knock Down", CombatKeyword.TargetKnockedDown),
        new Sentence("If target is Knock Down", CombatKeyword.TargetKnockedDown),
        new Sentence("If @ , @ , or @ deal #D damage", CombatKeyword.ConditionalDamageType),
        new Sentence("Deal #D damage", CombatKeyword.ChangeDamageType),
        new Sentence("Instead of #D", CombatKeyword.Ignore),
        new Sentence("Next attack", CombatKeyword.NextAttack),
        new Sentence("Next ability", CombatKeyword.NextAttack),
        new Sentence("For one attack", CombatKeyword.NextAttack),
        new Sentence("Target's next Rage Attack", CombatKeyword.TargetNextRageAttack),
        new Sentence("The next time they use a Rage attack", CombatKeyword.TargetNextRageAttack),
        new Sentence("%f of target's attack miss and have no effect", CombatKeyword.AddAccuracy, SignInterpretation.Opposite),
        new Sentence("%f of their attack miss and have no effect", CombatKeyword.AddAccuracy, SignInterpretation.Opposite),
        new Sentence("Target's attack", CombatKeyword.TargetSubsequentAttacks),
        new Sentence("Target's rage attack", CombatKeyword.TargetSubsequentRageAttacks),
        new Sentence("Ignore Knockback effect", CombatKeyword.IgnoreKnockback),
        new Sentence("Immunity to Knockback", CombatKeyword.IgnoreKnockback),
        new Sentence("Grant all targets immunity to Knockback", CombatKeyword.IgnoreKnockback),
        new Sentence("Grant Knockback Immunity", CombatKeyword.IgnoreKnockback),
        new Sentence("Immune to Knockback effects", CombatKeyword.IgnoreKnockback),
        new Sentence("Take %f damage from direct #D attack", CombatKeyword.AddDirectVulnerability),
        new Sentence("Suffer %f direct #D vulnerability", CombatKeyword.AddDirectVulnerability),
        new Sentence("Target take %f indirect #D damage", CombatKeyword.AddIndirectVulnerability),
        new Sentence("Indirect #D damage is %f per tick", CombatKeyword.AddIndirectVulnerability),
        new Sentence("Cause the target to take %f damage from indirect #D", CombatKeyword.AddIndirectVulnerability),
        new Sentence("Cause the target to take %f more damage from #D", CombatKeyword.AddVulnerability),
        //new Sentence("Cause the target to suffer %f from #D damage", CombatKeyword.AddVulnerability),
        new Sentence("Target is %f more vulnerable to #D damage", CombatKeyword.AddVulnerability),
        new Sentence("Target %f more vulnerable to #D damage", CombatKeyword.AddVulnerability),
        new Sentence("Make the target %f more vulnerable to #D", CombatKeyword.AddVulnerability),
        new Sentence("Make the target %f more vulnerable to direct #D", CombatKeyword.AddVulnerability),
        new Sentence("Cause the target to become %f more vulnerable to #D attack", CombatKeyword.AddVulnerability),
        new Sentence("Target take %f more damage from #D", CombatKeyword.AddVulnerability),
        new Sentence("Target take %f #D damage", CombatKeyword.AddVulnerability),
        new Sentence("Take %f damage from #D attack", CombatKeyword.AddVulnerability),
        new Sentence("Take %f more damage from #D attack", CombatKeyword.AddVulnerability),
        new Sentence("#D Vulnerability %f", CombatKeyword.AddVulnerability),
        //new Sentence("%f more damage from any #D attack", CombatKeyword.AddVulnerability),
        new Sentence("Target's #D Vulnerability %f", CombatKeyword.AddVulnerability),
        new Sentence("Target's #D Vulnerability", CombatKeyword.AddVulnerability),
        new Sentence("Target's vulnerability to #D %f", CombatKeyword.AddVulnerability),
        new Sentence("Vulnerability to Elite Attack %f", CombatKeyword.AddVulnerabilityToElite),
        new Sentence("Suffer %f damage from all Indirect Damage sources", CombatKeyword.AddVulnerability),
        new Sentence("Indirect Vulnerability %f", CombatKeyword.AddVulnerability),

        //new Sentence("B*u*t take %f damage from any #D attack", new List<CombatKeyword>() { CombatKeyword.But, CombatKeyword.AddVulnerability }),
        //new Sentence("#D Vulnerability +infinity", CombatKeyword.DestroyedByDamageType),
        //new Sentence("Instantly destroyed by ANY #D Damage", CombatKeyword.DestroyedByDamageType),
        new Sentence("Targets suffer %f damage from other #D attack", CombatKeyword.AddVulnerability),
        new Sentence("Cause the target to suffer %f #D damage", CombatKeyword.AddVulnerability),
        new Sentence("Cause target to be %f more vulnerable to #D damage", CombatKeyword.AddVulnerability),
        new Sentence("Deal %f damage to Health and Armor", CombatKeyword.DamageBoostToHealthAndArmor),
        new Sentence("Deal %f #D damage to Health", CombatKeyword.DamageBoostToHealthAndArmor),
        new Sentence("Increase the damage of all targets' attack %f", new List<CombatKeyword>() { CombatKeyword.DamageBoost, CombatKeyword.ApplyToAllies }),
        new Sentence("%f damage from all attack", new List<CombatKeyword>() { CombatKeyword.DamageBoost, CombatKeyword.ApplyToAllies }),
        new Sentence("Turning half of that into Trauma damage", CombatKeyword.ExtraTraumaDamage),
        new Sentence("#D attack Deal %f damage", CombatKeyword.DamageBoost),
        new Sentence("Rage attack deal %f", CombatKeyword.AnimalPetRageAttackBoost),
        new Sentence("Pet's Rage Attack Damage %f", CombatKeyword.AnimalPetRageAttackBoost),
        new Sentence("Rage Attack Damage %f", CombatKeyword.AnimalPetRageAttackBoost),
        new Sentence("Deal up to %f damage", CombatKeyword.DamageBoost),
        new Sentence("Add up to %f extra damage", CombatKeyword.DamageBoost),
        new Sentence("Deal %f Armor damage", CombatKeyword.DealArmorDamage),
        new Sentence("Deal %f damage to Armor", CombatKeyword.DealArmorDamage),
        new Sentence("Deal %f immediate #D damage", CombatKeyword.DamageBoost),
        new Sentence("Deal %f #D damage", CombatKeyword.DamageBoost),
        //new Sentence("Deal %f direct #D damage", CombatKeyword.DamageBoost),
        new Sentence("Deal direct #D damage to deal %f damage", CombatKeyword.DamageBoost),
        new Sentence("Deal direct #D damage", CombatKeyword.ChangeDamageType),
        new Sentence("Critical hit deal %f damage", new List<CombatKeyword>() { CombatKeyword.DamageBoost, CombatKeyword.ApplyToCrits }),
        new Sentence("Crit Damage %f", new List<CombatKeyword>() { CombatKeyword.DamageBoost, CombatKeyword.ApplyToCrits }),
        new Sentence("When they critically hit", CombatKeyword.ApplyToCrits),
        new Sentence("Deal %f damage", CombatKeyword.DamageBoost),
        new Sentence("Deal %f more damage", CombatKeyword.DamageBoost),
        new Sentence("Plus %f more damage", CombatKeyword.DamageBoost),
        new Sentence("Pet take %f #D damage", CombatKeyword.PetImmolation),
        new Sentence("Pet bleed for %f #D damage", CombatKeyword.PetImmolation),
        new Sentence("Cause your pet to bleed for %f #D damage", CombatKeyword.PetImmolation),
        new Sentence("(Debuff cannot stack with itself)", CombatKeyword.NonStackingDebuff),
        new Sentence("(This effect does not stack with itself.)", CombatKeyword.NonStackingDebuff),
        new Sentence("(Stacking up to %f times)", CombatKeyword.StackingDebuffLimit),
        new Sentence("(This effect does not stack with itself)", CombatKeyword.NonStackingDebuff),
        new Sentence("Combo: Deer Bash+Any Melee+Deer Kick:", CombatKeyword.Combo1),
        new Sentence("Combo: Gripjaw+Any Spider+Any Spider+Inject Venom:", CombatKeyword.Combo2),
        new Sentence("Combo: Rip+Any Melee+Any Giant Bat Attack+Tear:", CombatKeyword.Combo3),
        new Sentence("Combo: Screech+Any Giant Bat Attack+Any Melee+Virulent Bite:", CombatKeyword.Combo4),
        new Sentence("Combo: Rip+Any Melee+Any Melee+Bat Stability:", CombatKeyword.Combo5),
        new Sentence("Combo: Sonic Burst+Any Giant Bat Attack+Any Ranged Attack+Any Ranged Attack:", CombatKeyword.Combo6),
        new Sentence("Combo: Suppress+Any Melee+Any Melee+Headcracker:", CombatKeyword.Combo7),
        new Sentence("Combo: Forest Challenge+Any Melee+Any Melee+Any Epic Attack:", CombatKeyword.Combo8),
        new Sentence("Final step hit all enemies within %f meter", CombatKeyword.ComboFinalStepBurst),
        new Sentence("Final step hit all targets within %f meter", CombatKeyword.ComboFinalStepBurst),
        new Sentence("Final step deal %f damage", CombatKeyword.ComboFinalStepDamage),
        new Sentence("Final step stun the target while dealing %f damage", CombatKeyword.ComboFinalStepDamageAndStun),
        new Sentence("Whenever you take damage from an enemy", CombatKeyword.ReflectOnAnyAttack),
        new Sentence("While @ is active", CombatKeyword.ActiveAbility),
        new Sentence("If you are using the #S skill", CombatKeyword.ActiveSkill),
        new Sentence("While the #S skill is active", CombatKeyword.ActiveSkill),
        new Sentence("While #S skill is active", CombatKeyword.ActiveSkill),
        new Sentence("While #S skill active", CombatKeyword.ActiveSkill),
        new Sentence("When #S skill active", CombatKeyword.ActiveSkill),
        new Sentence("(If #S skill is active)", CombatKeyword.ActiveSkill),
        new Sentence("Gain %f #S Skill Base Damage", CombatKeyword.BaseDamageBoost),
        new Sentence("You have not been attacked in the past %f second", CombatKeyword.NotAttackedRecently),

        new Sentence("Combat Refresh restore %f health", CombatKeyword.CombatRefreshRestoreHeatlth),
        new Sentence("Healing from Combat Refreshes %f", CombatKeyword.CombatRefreshRestoreHeatlth),
        new Sentence("Boost the target's #D damage-over-time by %f per tick", CombatKeyword.DealIndirectDamage),
        new Sentence("Take %f damage from #D", CombatKeyword.AddVulnerability),
        new Sentence("Grant you %f #D Vulnerability", CombatKeyword.AddVulnerability),

        new Sentence("Boost your #S damage %f", CombatKeyword.DamageBoost),
        new Sentence("Boost your @ damage %f", CombatKeyword.DamageBoost),
        new Sentence("Boost your #D attack damage %f", CombatKeyword.DamageBoost),
        new Sentence("Boost #D attack damage %f", CombatKeyword.DamageBoost),
        new Sentence("Boost #D attack %f", CombatKeyword.DamageBoost),
        new Sentence("Boost the damage of your @ by %f", CombatKeyword.DamageBoost),
        new Sentence("Boost the damage of your @ %f", CombatKeyword.DamageBoost),
        new Sentence("Boost the damage from @ %f", CombatKeyword.DamageBoost),
        new Sentence("Boost the damage of all your attack %f", CombatKeyword.DamageBoost),
        new Sentence("Boost #D damage %f", CombatKeyword.DamageBoost),
        new Sentence("Increase the damage of your next attack by %f", new List<CombatKeyword>() { CombatKeyword.DamageBoost, CombatKeyword.NextAttack }),
        new Sentence("Reduce the damage of the target's next attack by %f", new List<CombatKeyword>() { CombatKeyword.DamageBoost, CombatKeyword.NextAttack }, SignInterpretation.AlwaysNegative),
        new Sentence("Reduce targets' next attack by %f", new List<CombatKeyword>() { CombatKeyword.DamageBoost, CombatKeyword.NextAttack }, SignInterpretation.AlwaysNegative),
        new Sentence("Their Rage attack are further reduced by %f", new List<CombatKeyword>() { CombatKeyword.TargetSubsequentRageAttacks, CombatKeyword.DamageBoost }, SignInterpretation.AlwaysNegative),
        new Sentence("Increase the damage of your @ by %f", CombatKeyword.DamageBoost),
        new Sentence("#S Skill Base Damage %f", CombatKeyword.BaseDamageBoost),
        new Sentence("#S Base Damage by %f", CombatKeyword.BaseDamageBoost),
        new Sentence("#S Base Damage %f", CombatKeyword.BaseDamageBoost),

        new Sentence("Your #S Base Damage increase %f", CombatKeyword.BaseDamageBoost),
        new Sentence("#S Base Attack Damage %f", CombatKeyword.BaseDamageBoost),
        new Sentence("Direct #D Damage %f", CombatKeyword.DirectOnlyDamageBoost),
        new Sentence("Universal Indirect Damage %f", CombatKeyword.DealIndirectDamage),
        new Sentence("Boost targets' indirect damage %f", CombatKeyword.DealIndirectDamage),
        new Sentence("Boost your direct and indirect #D damage %f", CombatKeyword.DamageBoost),
        new Sentence("Indirect #D damage %f", CombatKeyword.DealIndirectDamage),
        //new Sentence("Indirect #D %f per tick", CombatKeyword.DealIndirectDamage),
        new Sentence("Indirect #D %f (per tick)", CombatKeyword.DealIndirectDamage),
        new Sentence("%f indirect damage per tick", CombatKeyword.DealIndirectDamage),
        new Sentence("Deal indirect #D damage is %f per tick", CombatKeyword.DealIndirectDamage),
        new Sentence("Direct and Indirect #D Damage %f", CombatKeyword.DamageBoost),
        new Sentence("Indirect #D damage", CombatKeyword.DealIndirectDamage),
        new Sentence("Damage over Time %f per tick", new List<CombatKeyword>() { CombatKeyword.DamageBoost, CombatKeyword.DamageOverTime }),
        new Sentence("Damage over Time deal %f damage per tick", new List<CombatKeyword>() { CombatKeyword.DamageBoost, CombatKeyword.DamageOverTime }),
        //new Sentence("The #D Damage is boosted %f", CombatKeyword.DamageBoost),
        new Sentence("Damage is boosted %f", CombatKeyword.DamageBoost),
        new Sentence("Boost the damage of @ %f", CombatKeyword.DamageBoost),
        //new Sentence("Reap %f of the Health damage to you as healing", CombatKeyword.DrainHealth),
        //new Sentence("Reap %f of the Armor damage done", CombatKeyword.DrainArmor),
        new Sentence("Reap %f health", CombatKeyword.DrainHealth),
        new Sentence("Melee Attackers suffer %f indirect #D damage", CombatKeyword.ReflectMeleeIndirectDamage),
        //new Sentence("(up to a max of %f)", CombatKeyword.DrainArmorMax),
        new Sentence("The reap cap is %f", CombatKeyword.DrainHealthMax),
        //new Sentence("Deal %f direct damage", CombatKeyword.DamageBoost),
        new Sentence("%f direct health damage", CombatKeyword.DealDirectHealthDamage),
        new Sentence("+Up to %f extra damage", new List<CombatKeyword>() { CombatKeyword.DamageBoost, CombatKeyword.RandomDamage }),
        new Sentence("%f random damage", new List<CombatKeyword>() { CombatKeyword.DamageBoost, CombatKeyword.RandomDamage }),
        new Sentence("All attack deal %f damage", CombatKeyword.DamageBoost),
        new Sentence("Melee attack deal %f damage", new List<CombatKeyword>() { CombatKeyword.DamageBoost, CombatKeyword.MeleeAttack }),
        new Sentence("Deal %f indirect #D damage", CombatKeyword.DealIndirectDamage),
        new Sentence("Dealing %f damage", CombatKeyword.DamageBoost),
        new Sentence("Cause %f damage", CombatKeyword.DamageBoost),
        new Sentence("Your #D attack deal %f direct damage", CombatKeyword.DamageBoost),
        new Sentence("Over %f second", CombatKeyword.EffectDuration),
        new Sentence("Deal a further %f damage", CombatKeyword.DamageBoost),

        new Sentence("Lasts %f second", CombatKeyword.EffectDuration),
        new Sentence("For %f second after using ", CombatKeyword.EffectDuration),
        new Sentence("For %f second", CombatKeyword.EffectDuration),
        new Sentence("In the next %f second", CombatKeyword.EffectDuration),
        new Sentence("(%f second)", CombatKeyword.EffectDuration),
        new Sentence("For %f minute", CombatKeyword.EffectDurationMinute),
        new Sentence("That restore Armor after a 6 second delay", CombatKeyword.IfRestoreArmorAfterDelay),
        new Sentence("After a %f second delay", CombatKeyword.EffectDelay),
        new Sentence("After an %f second delay", CombatKeyword.EffectDelay),
        new Sentence("After %f second", CombatKeyword.EffectDelay),
        new Sentence("Every %f second", CombatKeyword.EffectRecurrence),
        new Sentence("Every other second", CombatKeyword.EffectRecurrence),
        new Sentence("Every few second", CombatKeyword.EffectRecurrence),
        new Sentence("With each heal", CombatKeyword.EffectRecurrence),
        new Sentence("Remove (up to) %f more Rage", CombatKeyword.AddRage, SignInterpretation.Opposite),
        new Sentence("Reduce Rage by %f", CombatKeyword.AddRage, SignInterpretation.Opposite),
        new Sentence("Reduce %f more Rage", CombatKeyword.AddRage, SignInterpretation.Opposite),
        new Sentence("Reduce the target's Rage by %f", CombatKeyword.AddRage, SignInterpretation.AlwaysNegative),
        new Sentence("Reduce target's Rage by %f", CombatKeyword.AddRage, SignInterpretation.AlwaysNegative),
        new Sentence("reduce targets' Rage by %f", CombatKeyword.AddRage, SignInterpretation.AlwaysNegative),
        new Sentence("%f Rage reduction", CombatKeyword.AddRage, SignInterpretation.AlwaysNegative),
        new Sentence("Generate %f Rage", CombatKeyword.AddRage),

        new Sentence("Remove %f Rage", CombatKeyword.AddRage, SignInterpretation.Opposite),
        new Sentence("Deplete %f Rage", CombatKeyword.AddRage, SignInterpretation.Opposite),
        new Sentence("Generate no Rage", CombatKeyword.ZeroRage),
        new Sentence("Raise the target's Max Rage by %f", CombatKeyword.IncreaseMaxRage),
        new Sentence("Raise target's Max Rage by %f", CombatKeyword.IncreaseMaxRage),
        new Sentence("Increase target's Max Rage by%f", CombatKeyword.IncreaseMaxRage),
        new Sentence("Generate no Taunt", CombatKeyword.ZeroTaunt),
        new Sentence("Sprint Power Cost %f", CombatKeyword.AddSprintPowerCost),
        new Sentence("Power cost to sprint in combat is reduced %f", CombatKeyword.AddSprintPowerCost),
        new Sentence("Power Cost %f", CombatKeyword.AddPowerCost),
        new Sentence("Power Cost is %f", CombatKeyword.AddPowerCost),
        new Sentence("Reduce the Power cost of your @ %f", CombatKeyword.AddPowerCost),
        new Sentence("Further reduce ability cost %f", CombatKeyword.AddPowerCost),
        new Sentence("Reduce Power cost of your next @ by %f", new List<CombatKeyword>() { CombatKeyword.AddPowerCost, CombatKeyword.NextUse }),
        new Sentence("Reduce the Power cost of your next @ by %f", new List<CombatKeyword>() { CombatKeyword.AddPowerCost, CombatKeyword.NextUse }),
        new Sentence("Reduce the Power cost of @ %f", CombatKeyword.AddPowerCost),
        new Sentence("In-Combat Armor Regeneration %f", CombatKeyword.AddArmorRegen),
        //new Sentence("%f Armor Regeneration", CombatKeyword.AddArmorRegen),
        //new Sentence("Recover %f Armor every five second", CombatKeyword.AddArmorRegen),
        new Sentence("Recover %f Armor", CombatKeyword.RestoreArmor),
        new Sentence("Power Regeneration is %f", CombatKeyword.AddPowerRegen),
        new Sentence("Cost %f Power", CombatKeyword.AddPowerCost),
        new Sentence("Regain %f Power", CombatKeyword.AddPowerRegen),
        new Sentence("The maximum Power restored by @ increase %f", CombatKeyword.AddPowerCostMax),
        new Sentence("Max Armor %f", CombatKeyword.AddMaxArmor),
        new Sentence("Increase your Max Power by %f", CombatKeyword.AddMaxPower),
        new Sentence("Max Power %f", CombatKeyword.AddMaxPower),
        new Sentence("Grant the target %f Max Power", CombatKeyword.AddMaxPower),
        new Sentence("Armor Recovery Per Second: %f of Max Armor", CombatKeyword.RegenPercentageOfArmor),
        new Sentence("They recover Armor equal to %f of their Max Armor", CombatKeyword.RegenPercentageOfArmor),

        new Sentence("Increase your Max Health by %f", CombatKeyword.AddMaxHealth),
        new Sentence("Increase your Max Armor by %f", CombatKeyword.AddMaxArmor),
        new Sentence("Reuse Time %f second", CombatKeyword.AddResetTimer),
        new Sentence("Reuse Time is %f second faster", CombatKeyword.AddResetTimer, SignInterpretation.AlwaysNegative),
        new Sentence("Reuse Time is %f second sooner", CombatKeyword.AddResetTimer, SignInterpretation.AlwaysNegative),
        new Sentence("Reuse Time is %f second", CombatKeyword.AddResetTimer),
        new Sentence("Reuse Time is %f sec", CombatKeyword.AddResetTimer),
        new Sentence("Hasten current reuse time of @ by %f second", CombatKeyword.AddResetTimer, SignInterpretation.AlwaysNegative),
        new Sentence("Hasten the current reuse time of @ by %f second", CombatKeyword.AddResetTimer, SignInterpretation.AlwaysNegative),
        new Sentence("Hasten the current reset time of @ by %f second", CombatKeyword.AddResetTimer, SignInterpretation.AlwaysNegative),
        //new Sentence("Hasten the remaining reset time of @ by %f second", CombatKeyword.AddResetTimer, SignInterpretation.AlwaysNegative),
        new Sentence("Hasten your current Combat Refresh delay by %f second", CombatKeyword.AddCombatRefreshTimer, SignInterpretation.AlwaysNegative),
        new Sentence("Hasten your current Combat Refresh time by %f second", CombatKeyword.AddCombatRefreshTimer, SignInterpretation.AlwaysNegative),
        new Sentence("Shorten the remaining reset time of @ by %f second", CombatKeyword.AddResetTimer, SignInterpretation.AlwaysNegative),
        new Sentence("Shorten the current reuse time of @ by %f second", CombatKeyword.AddResetTimer, SignInterpretation.AlwaysNegative),
        new Sentence("Reuse time of @ is hastened by %f second", CombatKeyword.AddResetTimer, SignInterpretation.AlwaysNegative),
        new Sentence("Reuse time on @ is hastened %f second", CombatKeyword.AddResetTimer, SignInterpretation.AlwaysNegative),
        new Sentence("@ reuse time is hastened %f second", CombatKeyword.AddResetTimer, SignInterpretation.AlwaysNegative),
        new Sentence("Reuse time is increased %f second", CombatKeyword.AddResetTimer),
        new Sentence("Reset time of @ is increased %f second", CombatKeyword.AddCombatRefreshTimer),
        new Sentence("Reduce the taunt of all your attack by %f", CombatKeyword.AddTaunt, SignInterpretation.Opposite),
        new Sentence("Taunt %f", CombatKeyword.AddTaunt),
        new Sentence("Taunted %f", CombatKeyword.AddTaunt),
        new Sentence("Taunt as if they did %f more damage", CombatKeyword.AddTaunt),
        new Sentence("Taunt as if they did %f damage", CombatKeyword.AddTaunt),
        new Sentence("Taunt their opponents %f less", CombatKeyword.AddTaunt, SignInterpretation.Opposite),
        new Sentence("Taunt of all your attack %f", CombatKeyword.AddTaunt),
        new Sentence("Your Taunt is %f", CombatKeyword.AddTaunt),
        new Sentence("%f Taunt", CombatKeyword.AddTaunt),
        new Sentence("When you have %f or less of your Armor left", CombatKeyword.BelowArmor),
        new Sentence("Have less than %f of their Max Rage", CombatKeyword.BelowMaxRage),
        new Sentence("With less than %f of their Max Rage", CombatKeyword.BelowMaxRage),
        new Sentence("Restore %f Health, Armor, and Power", CombatKeyword.RestoreHealthArmorPower),
        new Sentence("%f Health/Armor healing", CombatKeyword.RestoreHealthArmor),
        new Sentence("Heal you for %f Health/Armor", new List<CombatKeyword>() { CombatKeyword.RestoreHealthArmor, CombatKeyword.TargetSelf }),
        new Sentence("Heal you for %f Health", new List<CombatKeyword>() { CombatKeyword.RestoreHealth, CombatKeyword.TargetSelf }),
        new Sentence("Heal your pet for %f Health/Armor", new List<CombatKeyword>() { CombatKeyword.RestoreHealthArmor, CombatKeyword.ApplyToPet }),
        new Sentence("You regain %f Health", new List<CombatKeyword>() { CombatKeyword.RestoreHealth, CombatKeyword.TargetSelf }),
        new Sentence("Restore %f Health/Armor to your pet", new List<CombatKeyword>() { CombatKeyword.RestoreHealthArmor, CombatKeyword.ApplyToPet }),
        new Sentence("Restore %f Health/Armor", CombatKeyword.RestoreHealthArmor),

        new Sentence("Restore %f health (or Armor)", CombatKeyword.RestoreHealthArmor),
        new Sentence("Restore %f health or Armor", CombatKeyword.RestoreHealthArmor),
        //new Sentence("Restore %f health/Armor", CombatKeyword.RestoreHealthArmor),
        new Sentence("Pet Healing, if any, restore %f health", CombatKeyword.IncreaseHealEfficiency),
        new Sentence("Restore %f health", CombatKeyword.RestoreHealth),
        new Sentence("Boost the healing of your @ %f", CombatKeyword.RestoreHealth),
        new Sentence("You regenerate %f Health", new List<CombatKeyword>() { CombatKeyword.RestoreHealth, CombatKeyword.TargetSelf }),

        new Sentence("Heal all targets for %f health", CombatKeyword.RestoreHealth),
        new Sentence("Heal %f armor", CombatKeyword.RestoreArmor),
        new Sentence("Restore %f armor", CombatKeyword.RestoreArmor),
        new Sentence("Restore %f power", CombatKeyword.RestorePower),
        new Sentence("Recover %f health", CombatKeyword.RestoreHealth),
        new Sentence("Recover %f power", CombatKeyword.RestorePower),
        new Sentence("Power Restoration %f", CombatKeyword.RestorePower),
        new Sentence("Increased by %f of the Armor restored", CombatKeyword.MultiplyPowerRestauration),
        new Sentence("Restoration %f", CombatKeyword.RestoreHealth),
        new Sentence("You regain %f power", CombatKeyword.RestorePower),
        new Sentence("Cost no Power to cast", CombatKeyword.ZeroPowerCost),
        new Sentence("Take %f second to channel", CombatKeyword.AddChannelingTime),
        new Sentence("Heal %f health", CombatKeyword.RestoreHealth),
        new Sentence("Healing %f", CombatKeyword.RestoreHealth),
        new Sentence("Heal you %f", CombatKeyword.RestoreHealth),
        new Sentence("Heal %f", CombatKeyword.RestoreHealth),
        new Sentence("Restore %f Body Heat", CombatKeyword.RestoreBodyHeat),
        new Sentence("Sprint Speed increase by %f", CombatKeyword.AddSprintSpeed),
        new Sentence("Sprint Speed is increased %f", CombatKeyword.AddSprintSpeed),
        new Sentence("%f Sprint Speed", CombatKeyword.AddSprintSpeed),
        new Sentence("Max Health %f", CombatKeyword.AddMaxHealth),
        new Sentence("Max Health is %f", CombatKeyword.AddMaxHealth),
        new Sentence("Max Health by %f", CombatKeyword.AddMaxHealth),
        new Sentence("%f Max Health", CombatKeyword.AddMaxHealth),
        new Sentence("%f Max Armor", CombatKeyword.AddMaxArmor),
        new Sentence("Have %f Armor restoration", CombatKeyword.MultiplyArmorRestauration),
        new Sentence("Have %f Armor", CombatKeyword.AddMaxArmor),
        new Sentence("Attack Range is %f", CombatKeyword.AddRange),
        new Sentence("Range is %f meter", CombatKeyword.AddRange),
        new Sentence("Range is increased %f meter", CombatKeyword.AddRange),
        new Sentence("Range is reduced %f meter", CombatKeyword.AddRange, SignInterpretation.AlwaysNegative),
        new Sentence("Area of Effect %f meter", CombatKeyword.AddAoERange),
        new Sentence("Stun you", CombatKeyword.SelfStun),
        new Sentence("Complete stun immunity", CombatKeyword.StunImmunity),
        new Sentence("Grant immunity to new stun", CombatKeyword.StunImmunity),
        new Sentence("Grant them immunity to stun", CombatKeyword.StunImmunity),
        new Sentence("Grant immunity to new slow and root", CombatKeyword.SlowRootImmunity),
        new Sentence("Grant them immunity to Slow and Root", CombatKeyword.SlowRootImmunity),
        new Sentence("Grant you immunity to similar effects", CombatKeyword.SlowRootImmunity),
        new Sentence("Slow/Root Ignore Chance %f", new List<CombatKeyword>() { CombatKeyword.RemoveSlowRoot, CombatKeyword.SlowRootImmunity }),
        new Sentence("Grant the target %f Slow/Root Ignore Chance", CombatKeyword.SlowRootImmunity),
        new Sentence("Dispel stun", CombatKeyword.RemoveStun),
        new Sentence("Dispel any Stun", CombatKeyword.RemoveStun),
        new Sentence("Can be used while stunned", CombatKeyword.UsableWhileStunned),
        new Sentence("Doing so remove the stun effect from you.", CombatKeyword.RemoveStun),
        new Sentence("Dispel slow and root", CombatKeyword.RemoveSlowRoot),
        new Sentence("Dispel any Slow or Root", CombatKeyword.RemoveSlowRoot),
        new Sentence("Dispel any active Slow or Root", CombatKeyword.RemoveSlowRoot),
        new Sentence("Target is prone to random self-stuns", CombatKeyword.Concussion),
        new Sentence("Stun targets with %f+ DoT effects", CombatKeyword.StunDebuffed),
        new Sentence("Stun targets", CombatKeyword.Stun),
        new Sentence("To Stunned targets", CombatKeyword.StunnedTarget),
        new Sentence("If used while you are stunned", CombatKeyword.StunnedSelf),
        new Sentence("If you are stunned", CombatKeyword.StunnedSelf),
        new Sentence("Stun incorporeal enemies", CombatKeyword.StunIncorporeal),
        new Sentence("If target has %f or more Damage-over-Time effects, it also stun them", CombatKeyword.StunDebuffed),
        new Sentence("Stun", CombatKeyword.Stun),
        new Sentence("Targets are Knock back", CombatKeyword.Knockback),
        new Sentence("Knock back targets", CombatKeyword.Knockback),
        new Sentence("Knock all targets back", CombatKeyword.Knockback),
        new Sentence("Knock them back", CombatKeyword.Knockback),
        new Sentence("Knock the target backward", CombatKeyword.Knockback),
        new Sentence("Knock the enemy backward", CombatKeyword.Knockback),
        new Sentence("Knock the target back", CombatKeyword.Knockback),
        new Sentence("Knock target backward", CombatKeyword.Knockback),
        new Sentence("Knock targets backward", CombatKeyword.Knockback),
        new Sentence("Reset the time on", CombatKeyword.ResetOtherAbilityTimer),
        new Sentence("Deal %f total damage against Demons", CombatKeyword.DamageBoostAgainstSpecie),
        //new Sentence("Boost targets' mitigation %f", CombatKeyword.AddMitigation),
        new Sentence("Elite #D mitigation %f", new List<CombatKeyword>() { CombatKeyword.AddMitigation, CombatKeyword.TargetElite }),
        new Sentence("Take %f damage from elite attack", new List<CombatKeyword>() { CombatKeyword.AddMitigationDirect, CombatKeyword.TargetElite }, SignInterpretation.Opposite),
        new Sentence("%f Vulnerability to Elite Direct Damage", new List<CombatKeyword>() { CombatKeyword.AddMitigationDirect, CombatKeyword.TargetElite }, SignInterpretation.Opposite),
        new Sentence("#D mitigation %f", CombatKeyword.AddMitigation),
        new Sentence("Mitigate %f #D Damage", CombatKeyword.AddMitigation),

        new Sentence("Grant %f Universal #D Mitigation", CombatKeyword.AddMitigation),
        new Sentence("Universal Damage Mitigation %f", CombatKeyword.AddMitigation),
        new Sentence("Reduce the damage you take from #D attack by %f", CombatKeyword.AddMitigation),
        new Sentence("Reduce the damage of the next attack that hit the target by %f", new List<CombatKeyword>() { CombatKeyword.AddMitigation, CombatKeyword.NextAttack }),
        new Sentence("Take %f less damage from all attack", CombatKeyword.AddMitigation),
        new Sentence("Target take %f less damage from attack", CombatKeyword.AddMitigation),
        new Sentence("Target take %f less damage from #D attack", CombatKeyword.AddMitigation),
        new Sentence("Target to take %f less damage from attack", CombatKeyword.AddMitigation),
        new Sentence("Target to take %f less damage from #D attack", CombatKeyword.AddMitigation),
        new Sentence("Mitigate %f of all #D damage", CombatKeyword.AddMitigation),
        new Sentence("Mitigate %f damage from #D attacks", CombatKeyword.AddMitigation),
        new Sentence("Increase your mitigation vs #D attack %f", CombatKeyword.AddMitigation),
        new Sentence("You mitigate %f from all attack", CombatKeyword.AddMitigationDirect),
        new Sentence("Up to %f direct damage mitigation", new List<CombatKeyword>() { CombatKeyword.VariableMitigation }),
        new Sentence("#D Mitigation vs Elites %f", new List<CombatKeyword>() { CombatKeyword.AddMitigation, CombatKeyword.TargetElite }),
        new Sentence("Mitigation vs Elite attack %f", new List<CombatKeyword>() { CombatKeyword.AddMitigation, CombatKeyword.TargetElite }),
        new Sentence("Resist %f damage from Elite attack", new List<CombatKeyword>() { CombatKeyword.AddMitigation, CombatKeyword.TargetElite }),
        new Sentence("A further %f from Elite attack", new List<CombatKeyword>() { CombatKeyword.AddMitigationDirect, CombatKeyword.TargetElite }),
        new Sentence("Mitigate %f more against Elite attack", new List<CombatKeyword>() { CombatKeyword.AddMitigationDirect, CombatKeyword.TargetElite }),

        new Sentence("Mitigation vs all attack by Elites %f", new List<CombatKeyword>() { CombatKeyword.AddMitigation, CombatKeyword.TargetElite }),
        new Sentence("Against Elite enemies, mitigate %f", new List<CombatKeyword>() { CombatKeyword.AddMitigation, CombatKeyword.TargetElite }),
        new Sentence("Mitigate %f of all Elite attack", new List<CombatKeyword>() { CombatKeyword.AddMitigation, CombatKeyword.TargetElite }),
        new Sentence("%f Universal Direct Elite Vulnerability", new List<CombatKeyword>() { CombatKeyword.AddMitigation, CombatKeyword.TargetElite }, SignInterpretation.Opposite),
        new Sentence("Mitigation vs physical damage %f", CombatKeyword.AddMitigationPhysical),
        new Sentence("Elite Physical Damage Mitigation %f", new List<CombatKeyword>() { CombatKeyword.AddMitigationPhysical, CombatKeyword.TargetElite }),
        new Sentence("Physical Damage Mitigation %f", CombatKeyword.AddMitigationPhysical),
        new Sentence("%f absorption of any physical damage", CombatKeyword.AddMitigationPhysical),
        new Sentence("Any internal (#D) attack that hit you are reduced by %f", CombatKeyword.AddMitigationInternal),
        new Sentence("Any physical (#D) attack that hit you are reduced by %f", CombatKeyword.AddMitigationInternal),
        new Sentence("Universal Direct Mitigation %f", CombatKeyword.AddMitigationDirect),
        new Sentence("Universal Indirect Mitigation %f", CombatKeyword.AddMitigationIndirect),
        new Sentence("Mitigate all damage over time by %f per tick", CombatKeyword.AddMitigationIndirect),
        new Sentence("when armor is empty, up to %f when armor is full", new List<CombatKeyword>() { CombatKeyword.VariableMitigation }),
        new Sentence("Universal Direct Elite Mitigation %f", new List<CombatKeyword>() { CombatKeyword.AddMitigationDirect, CombatKeyword.TargetElite }),
        new Sentence("Universal Elite Direct Mitigation %f", new List<CombatKeyword>() { CombatKeyword.AddMitigationDirect, CombatKeyword.TargetElite }),
        new Sentence("%f Mitigation from all Elite attack", new List<CombatKeyword>() { CombatKeyword.AddMitigationDirect, CombatKeyword.TargetElite }),
        new Sentence("Stacks up to %f times", CombatKeyword.MaxStack),
        new Sentence("Stacks up to %fx", CombatKeyword.MaxStack),
        new Sentence("Max of %f stacks", CombatKeyword.MaxStack),
        new Sentence("To all allies", CombatKeyword.ApplyToAllies),
        new Sentence("All allies gain", CombatKeyword.ApplyToAllies),
        new Sentence("Grant all allies", CombatKeyword.ApplyToAllies),
        new Sentence("And your allies' attack", CombatKeyword.ApplyToAllies),
        new Sentence("Burst Evasion and Projectile evasion %f", new List<CombatKeyword>() { CombatKeyword.AddEvasionBurst, CombatKeyword.AddEvasionProjectile }),
        new Sentence("%f chance to avoid being hit by burst attack", CombatKeyword.AddEvasionBurst),
        new Sentence("%f evasion of burst attack", CombatKeyword.AddEvasionBurst),
        new Sentence("Burst Evasion %f", CombatKeyword.AddEvasionBurst),
        new Sentence("%f Burst Evasion", CombatKeyword.AddEvasionBurst),
        new Sentence("Boost Burst Evasion by %f", CombatKeyword.AddEvasionBurst),
        new Sentence("Projectile Evasion %f", CombatKeyword.AddEvasionProjectile),
        new Sentence("%f Projectile Evasion", CombatKeyword.AddEvasionProjectile),
        new Sentence("Melee Evasion %f", CombatKeyword.AddEvasionMelee),
        new Sentence("%f Melee Evasion", CombatKeyword.AddEvasionMelee),
        new Sentence("%f Ranged Evasion", CombatKeyword.AddEvasionRanged),
        new Sentence("%f mitigation of all physical attack", CombatKeyword.AddMitigationPhysical),
        new Sentence("%f mitigation of any physical damage", CombatKeyword.AddMitigationPhysical),
        new Sentence("%f mitigation against physical attack", CombatKeyword.AddMitigationPhysical),
        new Sentence("%f mitigation from direct attack", CombatKeyword.AddMitigationDirect),
        new Sentence("%f mitigation vs direct attack", CombatKeyword.AddMitigationDirect),
        new Sentence("%f mitigation against all attack", CombatKeyword.AddMitigation),
        //new Sentence("%f Mitigation from all attack", CombatKeyword.AddMitigation),
        new Sentence("%f Mitigation from attack", CombatKeyword.AddMitigation),
        new Sentence("%f mitigation vs #D", CombatKeyword.AddMitigation),
        //new Sentence("%f mitigation from #D attack", CombatKeyword.AddMitigation),
        new Sentence("Direct and Indirect #D mitigation %f", CombatKeyword.AddMitigation),
        new Sentence("Indirect #D mitigation %f", CombatKeyword.AddMitigationIndirect),
        new Sentence("%f Indirect #D Vulnerability", new List<CombatKeyword>() { CombatKeyword.AddMitigationIndirect, CombatKeyword.TargetSelf}, SignInterpretation.Opposite),
        new Sentence("Direct #D mitigation %f", CombatKeyword.AddMitigationDirect),
        new Sentence("%f mitigation from Direct #D damage", CombatKeyword.AddMitigationDirect),
        new Sentence("%f direct damage mitigation", CombatKeyword.AddMitigationDirect),
        new Sentence("Boost your direct damage mitigation %f", CombatKeyword.AddMitigationDirect),
        new Sentence("Cause all targets to suffer %f damage from direct #D attack", CombatKeyword.AddMitigation, SignInterpretation.Opposite),
        new Sentence("Debuff the target so that it take %f damage from future #D attack", CombatKeyword.AddMitigation, SignInterpretation.Opposite),
        new Sentence("You take %f damage from #D attack", CombatKeyword.AddMitigation, SignInterpretation.Opposite),
        new Sentence("%f #D mitigation", CombatKeyword.AddMitigation),
        new Sentence("Increase your #D Mitigation %f", CombatKeyword.AddMitigation),
        new Sentence("%f Damage Mitigation", CombatKeyword.AddMitigation),
        new Sentence("%f Direct Mitigation", CombatKeyword.AddMitigationDirect),
        new Sentence("Mitigate %f of all physical damage", CombatKeyword.AddMitigationPhysical),
        new Sentence("Mitigate %f physical damage", CombatKeyword.AddMitigationPhysical),
        new Sentence("Debuff their mitigation %f", CombatKeyword.DebuffMitigation, SignInterpretation.AlwaysNegative),
        new Sentence("%f Cold Protection (Direct and Indirect)", CombatKeyword.AddProtectionCold),
        new Sentence("%f Direct and Indirect Cold Protection", CombatKeyword.AddProtectionCold),
        new Sentence("Remove ongoing #D effects (up to %f dmg/sec)", CombatKeyword.RemoveEffects),
        new Sentence("Chance to Ignore Knockbacks %f", CombatKeyword.AddChanceToIgnoreKnockback),
        new Sentence("%f Knockback Ignore Chance", CombatKeyword.AddChanceToIgnoreKnockback),
        new Sentence("%f chance to ignore Stun", CombatKeyword.AddChanceToIgnoreStun),
        new Sentence("Chance to ignore Stun %f", CombatKeyword.AddChanceToIgnoreStun),
        new Sentence("Targets whose Rage meter are at least %f full", CombatKeyword.AboveRage),
        new Sentence("Targets whose Rage meter is at least %f full", CombatKeyword.AboveRage),
        new Sentence("If target's Rage is at least %f full", CombatKeyword.AboveRage),
        new Sentence("If target's Rage meter is at least %f full", CombatKeyword.AboveRage),
        new Sentence("%f chance to Knock Down", CombatKeyword.AddChanceToKnockdown),
        new Sentence("There's a %f chance", CombatKeyword.ApplyWithChance),
        new Sentence("%f chance to", CombatKeyword.ApplyWithChance),
        new Sentence("%f of your attack", CombatKeyword.ApplyWithChance),
        new Sentence("When wielding two knives", CombatKeyword.RequireTwoKnives),
        new Sentence("If the target is not focused on you", CombatKeyword.RequireNoAggro),
        new Sentence("If they are not focused on you", CombatKeyword.RequireNoAggro),
        new Sentence("If target is not focused on you", CombatKeyword.RequireNoAggro),
        new Sentence("To melee attackers", CombatKeyword.ReflectOnMelee),
        new Sentence("The first melee attacker is knock away", CombatKeyword.ReflectKnockbackOnFirstMelee),
        new Sentence("First attacker is knock back", CombatKeyword.ReflectKnockbackOnFirstMelee),

        new Sentence("Deal its damage when you are hit by burst attack", CombatKeyword.ReflectOnBurst),
        new Sentence("Deal its damage when you are hit by ranged attack", CombatKeyword.ReflectOnRanged),
        new Sentence("Chance to consume grass is %f", CombatKeyword.ChanceToConsume),

        new Sentence("Have %f health", CombatKeyword.AddMaxHealth),
        new Sentence("Per second", CombatKeyword.EffectRecurrence),
        new Sentence("Steal %f health", CombatKeyword.DrainHealth),
        new Sentence("Steal %f more health", CombatKeyword.DrainHealth),
        new Sentence("Chance to consume carrot is %f", CombatKeyword.ChanceToConsume),
        new Sentence("Lower target's aggro toward you by %f", CombatKeyword.AddTaunt, SignInterpretation.Opposite),
        new Sentence("Until you trigger the teleport", CombatKeyword.UntilTrigger),
        new Sentence("Until you Feint", CombatKeyword.UntilTrigger),
        new Sentence("Boost your movement speed by %f", CombatKeyword.AddSprintSpeed),
        new Sentence("Boost movement speed by %f", CombatKeyword.AddSprintSpeed),
        new Sentence("Increase your movement speed by %f", CombatKeyword.AddSprintSpeed),
        new Sentence("Out of Combat Sprint Speed %f", CombatKeyword.AddOutOfCombatSpeed),
        new Sentence("%f Out of Combat Sprint Speed", CombatKeyword.AddOutOfCombatSpeed),
        new Sentence("Your Out of Combat Sprint speed %f", CombatKeyword.AddOutOfCombatSpeed),
        new Sentence("Your Out of Combat Sprint speed by %f", CombatKeyword.AddOutOfCombatSpeed),
        new Sentence("Speed is %f", CombatKeyword.AddSprintSpeed),
        new Sentence("Movement speed %f", CombatKeyword.AddSprintSpeed),
        new Sentence("Sprint speed %f", CombatKeyword.AddSprintSpeed),
        new Sentence("Sprint speed by %f", CombatKeyword.AddSprintSpeed),
        new Sentence("%f Movement Speed", CombatKeyword.AddSprintSpeed),
        new Sentence("Fly speed is boosted %f", CombatKeyword.AddFlySpeed),
        new Sentence("Fly Speed %f", CombatKeyword.AddFlySpeed),
        new Sentence("Swim Speed %f", CombatKeyword.AddSwimSpeed),
        new Sentence("Slow target's movement by %f", CombatKeyword.Slow),
        new Sentence("Slow target's movement speed by %f", CombatKeyword.Slow),
        new Sentence("Give you %f Accuracy", CombatKeyword.AddAccuracy),
        new Sentence("Melee Accuracy %f", CombatKeyword.AddMeleeAccuracy),
        new Sentence("Burst Accuracy %f", CombatKeyword.AddBurstAccuracy),
        new Sentence("You gain Accuracy %f with melee attack", CombatKeyword.AddMeleeAccuracy),
        new Sentence("Accuracy %f", CombatKeyword.AddAccuracy),
        new Sentence("%f Accuracy", CombatKeyword.AddAccuracy),
        new Sentence("Boost melee evasion %f", CombatKeyword.AddEvasionMelee),
        new Sentence("Melee Evasion is %f", CombatKeyword.AddEvasionMelee),
        new Sentence("Lower targets' Evasion by %f", CombatKeyword.RemoveEvasion),
        new Sentence("%f more chance of missing", CombatKeyword.AddAccuracy, SignInterpretation.Opposite),
        new Sentence("%f Miss Chance", CombatKeyword.AddAccuracy, SignInterpretation.Opposite),
        new Sentence("%f Physical Damage Reflection", CombatKeyword.AddPhysicalReflection),
        new Sentence("%f resistance to #D damage", CombatKeyword.AddDamageResistance),
        new Sentence("#D Resistance %f", CombatKeyword.AddDamageResistance),
        new Sentence("%f resistant to #D damage", CombatKeyword.AddDamageResistance),
        new Sentence("An enemy within %f meter of the first", CombatKeyword.AnotherWithinDistance),
        new Sentence("Another enemy within %f meter", CombatKeyword.AnotherWithinDistance),
        new Sentence("Another enemy within %fm", CombatKeyword.AnotherWithinDistance),
        new Sentence("Within %f meter", CombatKeyword.WithinDistance),
        new Sentence("%f resistance to Elemental damage (Fire, Cold, Electricity)", CombatKeyword.AddElementalDamageResistance),
        new Sentence("Worth %f more XP", CombatKeyword.IncreaseXPGain),
        new Sentence("%f Earned Combat XP", CombatKeyword.IncreaseXPGain),
        new Sentence("Slain within %f second", CombatKeyword.MaxKillTime),
        new Sentence("Buff targets' direct #D damage %f", CombatKeyword.DamageBoost),
        new Sentence("%f Direct Damage", CombatKeyword.DirectOnlyDamageBoost),
        new Sentence("Direct Damage %f", CombatKeyword.DirectOnlyDamageBoost),
        new Sentence("%f #D damage", CombatKeyword.DamageBoost),
        new Sentence("#D damage %f", CombatKeyword.DamageBoost),
        new Sentence("%f health damage", CombatKeyword.DealDirectHealthDamage),
        new Sentence("%f #D health damage", CombatKeyword.DealDirectHealthDamage),

        new Sentence("%f damage to Armor", CombatKeyword.DealArmorDamage),
        new Sentence("%f damage", CombatKeyword.DamageBoost),
        new Sentence("Damage %f", CombatKeyword.DamageBoost),
        new Sentence("%f armor damage", CombatKeyword.DealArmorDamage),
        new Sentence("%f @", CombatKeyword.TargetAbilityBoost),
        new Sentence("@ boost %f", CombatKeyword.TargetAbilityBoost),
        new Sentence("Boost your @ %f", CombatKeyword.TargetAbilityBoost),
        new Sentence("Until you are attacked", CombatKeyword.UntilAttacked),
        new Sentence("(for all targets)", CombatKeyword.ApplyToAllies),
        new Sentence("Target does not yell for help because of this attack", CombatKeyword.NoYellForHelp),
        new Sentence("Doesn't cause the target to yell for help", CombatKeyword.NoYellForHelp),
        new Sentence("This attack does not cause the target to shout for help", CombatKeyword.NoYellForHelp),
        new Sentence("Does not cause the target to shout for help", CombatKeyword.NoYellForHelp),
        new Sentence("If it is a Werewolf ability", CombatKeyword.IfWerewolf),
        new Sentence("To the kicker", CombatKeyword.ToKickerTarget),
        new Sentence("Cause kicks", CombatKeyword.ToKickerTarget),
        new Sentence("Randomly repair broken bones", CombatKeyword.RepairBrokenBone),
        new Sentence("And %f armor", CombatKeyword.RestoreArmor),
        new Sentence("And %f power", CombatKeyword.RestorePower),
        new Sentence("Restore %f", CombatKeyword.RestoreHealth),
        new Sentence("%f Death Avoidance", CombatKeyword.AddDeathAvoidance),
        new Sentence("Target suffer a second blast of #D damage", CombatKeyword.SecondBlast),
        new Sentence("Target take a second full blast of delayed #D damage", CombatKeyword.SecondBlast),
        new Sentence("#D damage no longer dispel", CombatKeyword.NoDispel),
        new Sentence("Ignore mitigation from armor", CombatKeyword.IgnoreArmor),
        new Sentence("%f Body Heat", CombatKeyword.RestoreBodyHeat),
        new Sentence("Damage is %f", CombatKeyword.DamageBoost),
        new Sentence("#S damage %f", CombatKeyword.DamageBoost),
        new Sentence("Deal double damage", CombatKeyword.DamageBoostDouble),
        new Sentence("Channeling time is %f second", CombatKeyword.AddChannelingTime),
        new Sentence("Summon figment", CombatKeyword.AnotherTrap),
        new Sentence("Summon a deer ally", CombatKeyword.SummonDeer),
        new Sentence("Reduce it by %f more", CombatKeyword.Again, SignInterpretation.AlwaysNegative),
        new Sentence("Any time you Evade a Melee attack", CombatKeyword.OnEvadeMelee),
        new Sentence("Any time you Evade an attack", CombatKeyword.OnEvade),
        new Sentence("%f of all #D damage you take is mitigated and added to the damage done by your next Kick", CombatKeyword.MitigateReflectKick),
        new Sentence("%f of all #D damage you take is mitigated and added to the damage done by your next", CombatKeyword.MitigateReflect),
        new Sentence("At a %f rate", CombatKeyword.ReflectRate),
        new Sentence("Damage type become #D", CombatKeyword.ChangeDamageType),
        new Sentence("Damage type is #D instead", CombatKeyword.ChangeDamageType),
        new Sentence("Damage become #D", CombatKeyword.ChangeDamageType),
        new Sentence("Damage type is changed to #D", CombatKeyword.ChangeDamageType),
        new Sentence("Cause targets to lose %f Rage", CombatKeyword.AddRage, SignInterpretation.AlwaysNegative),
        new Sentence("You mitigate 1 point of attack damage for every 20 Armor you have remaining", CombatKeyword.ThickArmor),
        new Sentence("When you are hit by a monster's Rage Attack", CombatKeyword.ReflectOnBurst),
        new Sentence("When you are hit", CombatKeyword.ReflectOnAnyAttack),
        new Sentence("Any attackers that hit you", CombatKeyword.ReflectOnAnyAttack),
        new Sentence("Slowdown Cancelled", CombatKeyword.CancelSlowdown),
        new Sentence("has no slowdown effect", CombatKeyword.CancelSlowdown),
        new Sentence("Knockback Ignore Chance Ignored", CombatKeyword.DoNotIgnoreKnockback),
        new Sentence("any Knockback Ingore Chance is nullified", CombatKeyword.DoNotIgnoreKnockback),

        //new Sentence("Returning it to you as armor", CombatKeyword.DrainAsArmor),
        new Sentence("When you teleport", CombatKeyword.WhenTeleporting),
        new Sentence("When you trigger teleport", CombatKeyword.WhenTeleporting),
        new Sentence("b*u*t", CombatKeyword.But),
        new Sentence("However,", CombatKeyword.But),
        new Sentence("Your next use", CombatKeyword.NextUse),
        new Sentence("Pet base attack", CombatKeyword.ApplyToBasic),
        new Sentence("Implant insect eggs in the target", CombatKeyword.ImplantEgg),
        new Sentence("Subsequent Deer Kicks to this target", CombatKeyword.ImplantEgg),
        new Sentence("Absorb the first %f #D damage you suffer", CombatKeyword.AbsorbDamage),
        new Sentence("Absorb %f #D damage", CombatKeyword.AbsorbDamage),
    };
}
