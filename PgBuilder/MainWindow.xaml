<Window x:Class="PgBuilder.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:PgBuilder"
        xmlns:object="clr-namespace:PgJsonObjects;assembly=PgJsonObjects"
        xmlns:win="clr-namespace:System.Windows;assembly=PresentationCore"
        xmlns:conv="clr-namespace:Converters;assembly=XamlConverterLibrary"
        xmlns:localconv="clr-namespace:Converters"
        xmlns:localsel="clr-namespace:Selectors"
        Title="{Binding TitleText}"
        SizeToContent="WidthAndHeight"
        ResizeMode="NoResize"
        WindowStartupLocation="CenterScreen">
    <Window.Resources>
        <conv:BooleanToObjectConverter x:Key="convBooleanToObject"/>
        <conv:NullToObjectConverter x:Key="convNullToObject"/>
        <localconv:AbilityToIconConverter x:Key="convAbilityToIcon"/>
        <localconv:ItemToIconConverter x:Key="convItemToIcon"/>
        <localsel:ItemEffectTemplateSelector x:Key="selItemEffectTemplate"/>
        <localsel:AbilityTemplateSelector x:Key="selAbilityTemplate"/>
        <localsel:OtherEffectTemplateSelector x:Key="selOtherEffectTemplate"/>
        <localsel:PowerTemplateSelector x:Key="selPowerTemplate"/>
        <RoutedCommand x:Key="AddModCommand"/>
        <RoutedCommand x:Key="IncrementTierCommand"/>
        <RoutedCommand x:Key="DecrementTierCommand"/>
        <RoutedCommand x:Key="IncrementEnhancementCommand"/>
        <RoutedCommand x:Key="DecrementEnhancementCommand"/>
        <RoutedCommand x:Key="MoveDownCommand"/>
        <RoutedCommand x:Key="MoveUpCommand"/>
        <RoutedCommand x:Key="LoadCommand"/>
        <RoutedCommand x:Key="SaveCommand"/>
        <RoutedCommand x:Key="ClearCommand"/>
        <RoutedCommand x:Key="ClearItemCommand"/>
        <RoutedCommand x:Key="ClearModCommand"/>
        <CompositeCollection x:Key="CollapsedVisible">
            <win:Visibility>Collapsed</win:Visibility>
            <win:Visibility>Visible</win:Visibility>
        </CompositeCollection>
        <CompositeCollection x:Key="VisibleCollapsed">
            <win:Visibility>Visible</win:Visibility>
            <win:Visibility>Collapsed</win:Visibility>
        </CompositeCollection>
        <CompositeCollection x:Key="HiddenVisible">
            <win:Visibility>Hidden</win:Visibility>
            <win:Visibility>Visible</win:Visibility>
        </CompositeCollection>
        <CompositeCollection x:Key="RedGreenWhite">
            <SolidColorBrush>Red</SolidColorBrush>
            <SolidColorBrush>LightGreen</SolidColorBrush>
            <SolidColorBrush>White</SolidColorBrush>
        </CompositeCollection>
        <CompositeCollection x:Key="GreenRedWhite">
            <SolidColorBrush>LightGreen</SolidColorBrush>
            <SolidColorBrush>Red</SolidColorBrush>
            <SolidColorBrush>White</SolidColorBrush>
        </CompositeCollection>
        <CompositeCollection x:Key="WhiteGreen">
            <SolidColorBrush>White</SolidColorBrush>
            <SolidColorBrush>LightGreen</SolidColorBrush>
        </CompositeCollection>
        <BitmapImage x:Key="imgRemove" UriSource="/PgBuilder;component/Resources/remove.png"/>
        <BitmapImage x:Key="imgBasicAttack" UriSource="/PgBuilder;component/Resources/basic_attack.png"/>
        <DataTemplate x:Key="SkillTemplate" DataType="{x:Type object:PgSkill}">
            <TextBlock Text="{Binding Name}"/>
        </DataTemplate>
        <DataTemplate x:Key="ItemNameTemplate" DataType="{x:Type local:ItemInfo}">
            <TextBlock Text="{Binding ItemName}"/>
        </DataTemplate>
        <DataTemplate x:Key="ModNameTemplate" DataType="{x:Type local:Power}">
            <TextBox Text="{Binding Name, Mode=OneWay}" IsReadOnly="True" BorderThickness="0" Background="Transparent" TextWrapping="Wrap" IsHitTestVisible="False" VerticalAlignment="Center" MaxWidth="400" Margin="5,0,0,0"/>
        </DataTemplate>
        <DataTemplate x:Key="ModNameFirstTemplate" DataType="{x:Type local:Power}">
            <StackPanel MaxWidth="400">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <Separator Grid.Column="0" VerticalAlignment="Center" Margin="0,0,5,0"/>
                    <TextBlock Grid.Column="1" Text="{Binding SkillName}" FontWeight="Bold"/>
                    <Separator Grid.Column="2" VerticalAlignment="Center" Margin="5,0,0,0"/>
                </Grid>
                <TextBox Text="{Binding Name, Mode=OneWay}" IsReadOnly="True" BorderThickness="0" Background="Transparent" TextWrapping="Wrap" IsHitTestVisible="False" VerticalAlignment="Center" Margin="5,0,0,0"/>
            </StackPanel>
        </DataTemplate>
        <DataTemplate x:Key="SpecialValueTemplate">
            <WrapPanel Orientation="Horizontal" Visibility="{Binding IsDisplayed, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}">
                <TextBlock Text="{Binding Label}" Foreground="White"/>
                <TextBlock Text="{Binding AsString}" Foreground="{Binding IsModified, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource RedGreenWhite}}" Margin="5,0,0,0"/>
                <TextBlock Text="{Binding Suffix}" Foreground="White" Margin="5,0,0,0"/>
            </WrapPanel>
        </DataTemplate>
        <DataTemplate x:Key="SpecialEffectTemplate">
            <Grid>
                <TextBlock Text="{Binding}" TextWrapping="Wrap" Foreground="White"/>
                <TextBlock Background="Black" Foreground="White" FontWeight="Bold" HorizontalAlignment="Left" VerticalAlignment="Top">Special:</TextBlock>
            </Grid>
        </DataTemplate>
        <DataTemplate x:Key="OtherEffectSimpleTemplate">
            <DockPanel>
                <TextBlock DockPanel.Dock="Left" Foreground="White" Margin="0,0,5,0">•</TextBlock>
                <TextBlock Text="{Binding Description}" Foreground="LightGreen" FontWeight="Bold" TextWrapping="Wrap"/>
            </DockPanel>
        </DataTemplate>
        <DataTemplate x:Key="OtherEffectDoTTemplate">
            <WrapPanel Orientation="Horizontal" Visibility="{Binding IsDisplayed, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}">
                <TextBlock Foreground="White">•</TextBlock>
                <TextBlock Text="{Binding Prefix}" Foreground="White" FontWeight="Normal" TextWrapping="Wrap" Margin="5,0,0,0"/>
                <TextBlock Text="{Binding Damage}" Foreground="LightGreen" FontWeight="Normal" TextWrapping="Wrap" Margin="5,0,0,0"/>
                <TextBlock Text="{Binding Suffix}" Foreground="White" FontWeight="Normal" TextWrapping="Wrap" Margin="5,0,0,0"/>
            </WrapPanel>
        </DataTemplate>
        <DataTemplate x:Key="AbilityCompleteImageTemplate" DataType="{x:Type local:AbilitySlot}">
            <DataTemplate.Resources>
                <Style x:Key="{x:Type TextBlock}" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                    <Setter Property="Foreground" Value="White"/>
                </Style>
            </DataTemplate.Resources>
            <DockPanel Visibility="{Binding AbilityName, Converter={StaticResource convNullToObject}, ConverterParameter={StaticResource HiddenVisible}}" ContextMenu="{Binding AbilityContextMenu}" LastChildFill="False" Background="Black" Width="350">
                <DockPanel.Style>
                    <Style TargetType="{x:Type DockPanel}">
                        <Style.Triggers>
                            <EventTrigger RoutedEvent="MouseLeftButtonDown">
                                <EventTrigger.Actions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="ContextMenu.IsOpen">
                                                <DiscreteBooleanKeyFrame KeyTime="0:0:0" Value="True"/>
                                            </BooleanAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger.Actions>
                            </EventTrigger>
                        </Style.Triggers>
                    </Style>
                </DockPanel.Style>
                <DockPanel DockPanel.Dock="Top" Margin="5,5,5,0">
                    <Image Source="{Binding Ability, Converter={StaticResource convAbilityToIcon}}" Width="64" Height="64" Margin="0,0,5,0"/>
                    <TextBlock Text="{Binding AbilityName}" TextWrapping="Wrap" FontWeight="Bold" Foreground="Yellow" FontSize="24" Margin="2,0,0,0"/>
                </DockPanel>
                <TextBlock DockPanel.Dock="Top" Text="{Binding AbilityDescription}" TextWrapping="Wrap" TextAlignment="Left" Margin="5,5,5,0"/>
                <StackPanel DockPanel.Dock="Top" Margin="5,5,5,0">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock FontWeight="Bold">Min Level:</TextBlock>
                        <TextBlock Text="{Binding AbilityMinLevel}" Foreground="{Binding AbilityMinLevelModified, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource RedGreenWhite}}" Margin="5,0,0,0"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Visibility="{Binding PowerCost.HasValue, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}">
                        <TextBlock FontWeight="Bold">Power Cost:</TextBlock>
                        <TextBlock Text="{Binding PowerCost.AsString}" Foreground="{Binding PowerCost.IsModified, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource GreenRedWhite}}" Margin="5,0,0,0"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock FontWeight="Bold">Reuse Time:</TextBlock>
                        <TextBlock Text="{Binding ResetTime.AsString}" Foreground="{Binding ResetTime.IsModified, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource GreenRedWhite}}" Margin="5,0,0,0"/>
                        <TextBlock Margin="5,0,0,0">seconds</TextBlock>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Visibility="{Binding DelayLoopTime.HasValue, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}">
                        <TextBlock FontWeight="Bold" Visibility="{Binding IsDelayLoopOnlyUsedInCombat, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource VisibleCollapsed}}">Channeling Time:</TextBlock>
                        <TextBlock FontWeight="Bold" Visibility="{Binding IsDelayLoopOnlyUsedInCombat, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}">In-Combat Channeling Time:</TextBlock>
                        <TextBlock Text="{Binding DelayLoopTime.AsString}" Foreground="{Binding DelayLoopTime.IsModified, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource GreenRedWhite}}" Margin="5,0,0,0"/>
                        <TextBlock Margin="5,0,0,0">seconds</TextBlock>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Visibility="{Binding Range.HasValue, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}">
                        <TextBlock FontWeight="Bold">Range:</TextBlock>
                        <TextBlock Text="{Binding Range.AsString}" Foreground="{Binding Range.IsModified, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource RedGreenWhite}}" Margin="5,0,0,0"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Visibility="{Binding AoE.HasValue, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}">
                        <TextBlock FontWeight="Bold">Range:</TextBlock>
                        <StackPanel Orientation="Horizontal" Margin="5,0,0,0">
                            <TextBlock Margin="0,0,5,0">All targets within</TextBlock>
                            <TextBlock Text="{Binding AoE.AsString}" Foreground="{Binding AoE.IsModified, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource RedGreenWhite}}"/>
                            <TextBlock Margin="5,0,0,0">meters</TextBlock>
                        </StackPanel>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Visibility="{Binding HasAbilityDamage, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}">
                        <TextBlock Visibility="{Binding HasAbilityNormalDamage, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}" FontWeight="Bold">Damage:</TextBlock>
                        <TextBlock Visibility="{Binding HasAbilityHealthDamage, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}" FontWeight="Bold">Damage Health:</TextBlock>
                        <TextBlock Visibility="{Binding HasAbilityArmorDamage, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}" FontWeight="Bold">Damage Armor:</TextBlock>
                        <TextBlock Text="{Binding AbilityDamage}" Foreground="{Binding AbilityDamageModified, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource RedGreenWhite}}" Margin="5,0,0,0"/>
                        <TextBlock Text="{Binding AbilityDamageTypeString}" Foreground="{Binding AbilityDamageTypeModified, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource WhiteGreen}}" Margin="5,0,0,0"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Visibility="{Binding HasAbilityDamageVulnerable, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}">
                        <TextBlock FontWeight="Bold">Extra Dmg To Vulnerable Targets:</TextBlock>
                        <TextBlock Text="{Binding AbilityDamageVulnerable}" Foreground="{Binding AbilityDamageVulnerableModified, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource RedGreenWhite}}" Margin="5,0,0,0"/>
                        <TextBlock Text="{Binding AbilityDamageTypeString}" Foreground="{Binding AbilityDamageTypeModified, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource WhiteGreen}}" Margin="5,0,0,0"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Visibility="{Binding ExtraTaunt.HasValue, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}">
                        <TextBlock FontWeight="Bold">Extra Taunt:</TextBlock>
                        <TextBlock Text="{Binding ExtraTaunt.AsString}" Foreground="{Binding ExtraTaunt.IsModified, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource GreenRedWhite}}" Margin="5,0,0,0"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Visibility="{Binding RageBoost.HasValue, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}">
                        <TextBlock FontWeight="Bold">Reduces Rage:</TextBlock>
                        <TextBlock Text="{Binding RageBoost.AsString}" Foreground="{Binding RageBoost.IsModified, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource RedGreenWhite}}" Margin="5,0,0,0"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Visibility="{Binding RageMultiplier.HasValue, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}">
                        <TextBlock FontWeight="Bold">Enrages Target:</TextBlock>
                        <TextBlock Text="{Binding RageMultiplier.AsString}" Foreground="{Binding RageMultiplier.IsModified, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource GreenRedWhite}}" Margin="5,0,0,0"/>
                        <TextBlock>%</TextBlock>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Visibility="{Binding Accuracy.HasValue, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}">
                        <TextBlock FontWeight="Bold">Accuracy:</TextBlock>
                        <TextBlock Text="{Binding Accuracy.AsString}" Foreground="{Binding Accuracy.IsModified, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource RedGreenWhite}}" Margin="5,0,0,0"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Visibility="{Binding IsConsumingAmmo, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}">
                        <TextBlock FontWeight="Bold">Consumes:</TextBlock>
                        <TextBlock Text="{Binding AmmoName}" Margin="5,0,0,0"/>
                    </StackPanel>
                    <ItemsControl ItemsSource="{Binding SpecialValueList}" ItemTemplate="{StaticResource SpecialValueTemplate}"/>
                    <ItemsControl ItemsSource="{Binding SpecialEffectList}" ItemTemplate="{StaticResource SpecialEffectTemplate}"/>
                    <TextBlock FontWeight="Bold" Visibility="{Binding IsNiceAttack, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}">This is a Nice Attack.</TextBlock>
                    <TextBlock FontWeight="Bold" Visibility="{Binding IsCoreAttack, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}">This is a Core Attack.</TextBlock>
                    <TextBlock FontWeight="Bold" Visibility="{Binding IsEpicAttack, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}">This is an Epic Attack.</TextBlock>
                    <TextBlock FontWeight="Bold" Visibility="{Binding IsSignatureDebuff, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}">This is a Signature Debuff ability.</TextBlock>
                    <TextBlock FontWeight="Bold" Visibility="{Binding IsSignatureSupport, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}">This is a Signature Support ability.</TextBlock>
                    <TextBlock FontWeight="Bold" Visibility="{Binding IsMajorHeal, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}">This is a Major Healing ability.</TextBlock>
                    <TextBlock FontWeight="Bold" Visibility="{Binding IsMinorHeal, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}">This is a Minor Healing ability.</TextBlock>
                    <TextBlock FontWeight="Bold" Visibility="{Binding IsSurvivalUtility, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}">This is a Survival-Utility ability.</TextBlock>
                    <StackPanel Visibility="{Binding IsBasicAttack, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}">
                        <TextBlock FontWeight="Bold">This is a Basic Attack.</TextBlock>
                        <DockPanel>
                            <Image DockPanel.Dock="Left" Source="{StaticResource imgBasicAttack}" Width="64" Height="64"/>
                            <StackPanel Margin="10,0,0,0">
                                <TextBlock TextWrapping="Wrap">Once every 15 seconds, Basic Attacks generate a Combat Refresh that restores:</TextBlock>
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Row="0" Grid.Column="0" Visibility="{Binding HasBasicAttackHealth, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}" Margin="0,0,5,0">•</TextBlock>
                                    <TextBlock Grid.Row="0" Grid.Column="1" Visibility="{Binding HasBasicAttackHealth, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}" Text="{Binding BasicAttackHealth}" TextAlignment="Right"/>
                                    <TextBlock Grid.Row="0" Grid.Column="2" Visibility="{Binding HasBasicAttackHealth, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}" Margin="5,0,0,0">Health</TextBlock>
                                    <TextBlock Grid.Row="1" Grid.Column="0" Visibility="{Binding HasBasicAttackArmor, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}" Margin="0,0,5,0">•</TextBlock>
                                    <TextBlock Grid.Row="1" Grid.Column="1" Visibility="{Binding HasBasicAttackArmor, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}" Text="{Binding BasicAttackArmor}" TextAlignment="Right"/>
                                    <TextBlock Grid.Row="1" Grid.Column="2" Visibility="{Binding HasBasicAttackArmor, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}" Margin="5,0,0,0">Armor</TextBlock>
                                    <TextBlock Grid.Row="2" Grid.Column="0" Visibility="{Binding HasBasicAttackPower, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}" Margin="0,0,5,0">•</TextBlock>
                                    <TextBlock Grid.Row="2" Grid.Column="1" Visibility="{Binding HasBasicAttackPower, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}" Text="{Binding BasicAttackPower}" TextAlignment="Right"/>
                                    <TextBlock Grid.Row="2" Grid.Column="2" Visibility="{Binding HasBasicAttackPower, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}" Margin="5,0,0,0">Power</TextBlock>
                                </Grid>
                            </StackPanel>
                        </DockPanel>
                    </StackPanel>
                    <TextBlock DockPanel.Dock="Top" Visibility="{Binding HasOtherEffects, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}" FontWeight="Bold">Other Effects:</TextBlock>
                    <ItemsControl DockPanel.Dock="Top" ItemsSource="{Binding OtherEffectList}" ItemTemplateSelector="{StaticResource selOtherEffectTemplate}" Margin="0,0,0,5"/>
                </StackPanel>
            </DockPanel>
        </DataTemplate>
        <DataTemplate x:Key="AbilityBigImageTemplate" DataType="{x:Type local:AbilitySlot}">
            <DataTemplate.Resources>
                <Style x:Key="{x:Type TextBlock}" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                    <Setter Property="Foreground" Value="White"/>
                </Style>
            </DataTemplate.Resources>
            <Grid>
                <ContentControl ContentTemplate="{StaticResource AbilityCompleteImageTemplate}" Content="{TemplateBinding Content}"/>
                <Border BorderBrush="LightGreen" BorderThickness="3" Visibility="{Binding AbilityName, Converter={StaticResource convNullToObject}, ConverterParameter={StaticResource VisibleCollapsed}}" Margin="5,0,5,0"/>
            </Grid>
        </DataTemplate>
        <DataTemplate x:Key="AbilitySlotTemplate" DataType="{x:Type local:AbilitySlot}">
            <DataTemplate.Resources>
                <Style x:Key="{x:Type ToolTip}" TargetType="ToolTip" BasedOn="{StaticResource {x:Type ToolTip}}">
                    <Setter Property="OverridesDefaultStyle" Value="true"/>
                    <Setter Property="HasDropShadow" Value="True" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ToolTip}">
                                <ContentControl ContentTemplate="{StaticResource AbilityCompleteImageTemplate}" Content="{TemplateBinding Content}"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </DataTemplate.Resources>
            <Image Source="{Binding Source}" ContextMenu="{Binding AbilityContextMenu}" ToolTip="{Binding Path=DataContext, RelativeSource={RelativeSource Self}}" Width="64" Height="64" Margin="5,0,5,0">
                <Image.Style>
                    <Style TargetType="{x:Type Image}">
                        <Style.Triggers>
                            <EventTrigger RoutedEvent="MouseLeftButtonDown">
                                <EventTrigger.Actions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="ContextMenu.IsOpen">
                                                <DiscreteBooleanKeyFrame KeyTime="0:0:0" Value="True"/>
                                            </BooleanAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger.Actions>
                            </EventTrigger>
                        </Style.Triggers>
                    </Style>
                </Image.Style>
            </Image>
        </DataTemplate>
        <DataTemplate x:Key="GearSlotTemplate" DataType="{x:Type local:GearSlot}">
            <TextBlock Text="{Binding Name}"/>
        </DataTemplate>
        <DataTemplate x:Key="ModTemplate" DataType="{x:Type local:Mod}">
            <DockPanel Background="White">
                <Button DockPanel.Dock="Left" Command="{StaticResource IncrementTierCommand}" VerticalAlignment="Top" Width="20">+</Button>
                <Button DockPanel.Dock="Left" Command="{StaticResource DecrementTierCommand}" VerticalAlignment="Top" Width="20" Margin="2,0,0,0">-</Button>
                <Button DockPanel.Dock="Left" Command="{StaticResource MoveDownCommand}" VerticalAlignment="Top" Width="20" Margin="2,0,0,0">↓</Button>
                <Button DockPanel.Dock="Left" Command="{StaticResource MoveUpCommand}" VerticalAlignment="Top" Width="20" Margin="2,0,0,0">↑</Button>
                <Button DockPanel.Dock="Right" Command="{StaticResource ClearModCommand}" VerticalAlignment="Center" Margin="5,0,0,0">
                    <Button.Template>
                        <ControlTemplate>
                            <Image Source="{StaticResource imgRemove}" Width="16" Height="16"/>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
                <ComboBox ItemsSource="{Binding AvailablePowerList}" ItemTemplateSelector="{StaticResource selPowerTemplate}" SelectedIndex="{Binding SelectedPowerIndex, Mode=OneWay}" IsReadOnly="True" SelectionChanged="OnPowerSelectionChanged" VerticalAlignment="Center" Margin="5,0,0,0">
                    <ComboBox.ItemContainerStyle>
                        <Style TargetType="ComboBoxItem">
                            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                        </Style>
                    </ComboBox.ItemContainerStyle>
                </ComboBox>
            </DockPanel>
        </DataTemplate>
    </Window.Resources>
    <Window.CommandBindings>
        <CommandBinding Command="{StaticResource AddModCommand}" CanExecute="CanAddMod" Executed="OnAddMod"/>
        <CommandBinding Command="{StaticResource IncrementTierCommand}" Executed="OnIncrementTier"/>
        <CommandBinding Command="{StaticResource DecrementTierCommand}" Executed="OnDecrementTier"/>
        <CommandBinding Command="{StaticResource IncrementEnhancementCommand}" Executed="OnIncrementEnhancement"/>
        <CommandBinding Command="{StaticResource DecrementEnhancementCommand}" Executed="OnDecrementEnhancement"/>
        <CommandBinding Command="{StaticResource MoveDownCommand}" Executed="OnMoveDown"/>
        <CommandBinding Command="{StaticResource MoveUpCommand}" Executed="OnMoveUp"/>
        <CommandBinding Command="{StaticResource LoadCommand}" Executed="OnLoad"/>
        <CommandBinding Command="{StaticResource SaveCommand}" Executed="OnSave"/>
        <CommandBinding Command="{StaticResource ClearCommand}" Executed="OnClear"/>
        <CommandBinding Command="{StaticResource ClearItemCommand}" Executed="OnClearItem"/>
        <CommandBinding Command="{StaticResource ClearModCommand}" Executed="OnClearMod"/>
    </Window.CommandBindings>
    <DockPanel Margin="0,5,0,0">
        <DockPanel DockPanel.Dock="Top">
            <Grid DockPanel.Dock="Left" Margin="10,0,0,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <GroupBox Grid.Column="0" Header="Skills">
                    <Grid VerticalAlignment="Top" Margin="5,5,5,5">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <TextBlock Grid.Column="0" Grid.Row="0" TextAlignment="Right" VerticalAlignment="Center" Margin="0,0,0,0">Primary:</TextBlock>
                        <TextBlock Grid.Column="0" Grid.Row="1" TextAlignment="Right" VerticalAlignment="Center" Margin="0,5,0,0">Secondary:</TextBlock>
                        <ComboBox Grid.Column="1" Grid.Row="0" ItemsSource="{Binding SkillList}" ItemTemplate="{StaticResource SkillTemplate}" SelectedIndex="{Binding SelectedSkill1, Mode=OneWay}" IsReadOnly="True" SelectionChanged="OnSkillSelectionChanged1" VerticalAlignment="Center" Width="120" Margin="5,0,0,0"/>
                        <ComboBox Grid.Column="1" Grid.Row="1" ItemsSource="{Binding SkillList}" ItemTemplate="{StaticResource SkillTemplate}" SelectedIndex="{Binding SelectedSkill2, Mode=OneWay}" IsReadOnly="True" SelectionChanged="OnSkillSelectionChanged2" VerticalAlignment="Center" Width="120" Margin="5,5,0,0"/>
                    </Grid>
                </GroupBox>
                <GroupBox Grid.Column="1" Header="View" MinWidth="120" Margin="10,0,0,0">
                    <Grid VerticalAlignment="Top" Margin="5,5,5,5">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <RadioButton Grid.Row="0" IsChecked="{Binding IsLargeView, Mode=OneWay}" Checked="OnLargeViewChecked" Margin="0,0,0,0">Large</RadioButton>
                        <RadioButton Grid.Row="1" IsChecked="{Binding IsSmallView, Mode=OneWay}" Checked="OnSmallViewChecked" Margin="0,5,0,0">Small</RadioButton>
                    </Grid>
                </GroupBox>
                <GroupBox Grid.Column="2" Header="Miscellaneous" Margin="10,0,0,0">
                    <Grid Margin="5,5,5,5">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <CheckBox Grid.Row="0" IsChecked="{Binding IsFairyCharacter, Mode=OneWay}" Checked="OnFairyCharacterChecked" Unchecked="OnFairyCharacterUnchecked" Margin="0,0,0,0">Fairy character</CheckBox>
                        <DockPanel Grid.Row="1" Margin="0,0,0,0">
                            <TextBlock VerticalAlignment="Center" Margin="0,0,5,0">Lore Level:</TextBlock>
                            <TextBox Text="{Binding LoreLevel}" VerticalAlignment="Center"/>
                        </DockPanel>
                    </Grid>
                </GroupBox>
            </Grid>
            <StackPanel DockPanel.Dock="Right" Margin="10,8,0,0">
                <Button Width="60" Height="20" Command="{StaticResource LoadCommand}" Margin="10,0,10,0">Load...</Button>
                <Button Width="60" Height="20" Command="{StaticResource SaveCommand}" Margin="10,10,10,0">Save...</Button>
                <Button Width="60" Height="20" Command="{StaticResource ClearCommand}" Margin="10,10,10,0">Clear</Button>
            </StackPanel>
            <Grid/>
        </DockPanel>
        <TabControl DockPanel.Dock="Bottom" ItemsSource="{Binding GearSlotList}" ItemTemplate="{StaticResource GearSlotTemplate}" SelectedIndex="0" Margin="10,10,10,10">
            <TabControl.ContentTemplate>
                <ItemContainerTemplate>
                    <DockPanel LastChildFill="False">
                        <DockPanel DockPanel.Dock="Top" Margin="0,10,0,0" LastChildFill="False">
                            <DockPanel DockPanel.Dock="Left" LastChildFill="False" VerticalAlignment="Top" Margin="10,0,0,10" Width="260">
                                <DockPanel DockPanel.Dock="Top">
                                    <DockPanel.Resources>
                                        <DataTemplate x:Key="ItemSimpleEffectTemplate" DataType="{x:Type object:IPgItemSimpleEffect}">
                                            <TextBox Text="{Binding Description, Mode=OneWay}" IsReadOnly="True" BorderThickness="0" Foreground="Red" Background="Transparent" TextWrapping="Wrap" IsHitTestVisible="False" VerticalAlignment="Center" Margin="5,1,0,1"/>
                                        </DataTemplate>
                                        <DataTemplate x:Key="ItemAttributeLinkTemplate" DataType="{x:Type object:IPgItemAttributeLink}">
                                            <TextBox Text="{Binding FriendlyNameAndEffect, Mode=OneWay}" IsReadOnly="True" BorderThickness="0" Foreground="Red" Background="Transparent" TextWrapping="Wrap" IsHitTestVisible="False" VerticalAlignment="Center" Margin="5,1,0,1"/>
                                        </DataTemplate>
                                    </DockPanel.Resources>
                                    <Button DockPanel.Dock="Right" Visibility="{Binding IsItemSelected, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource HiddenVisible}}" Command="{StaticResource ClearItemCommand}" VerticalAlignment="Center" Margin="5,0,0,0">
                                        <Button.Template>
                                            <ControlTemplate>
                                                <Image Source="{StaticResource imgRemove}" Width="16" Height="16"/>
                                            </ControlTemplate>
                                        </Button.Template>
                                    </Button>
                                    <Grid>
                                        <Grid.Resources>
                                            <Style x:Key="{x:Type ToolTip}" TargetType="ToolTip" BasedOn="{StaticResource {x:Type ToolTip}}">
                                                <Setter Property="OverridesDefaultStyle" Value="true"/>
                                                <Setter Property="HasDropShadow" Value="True" />
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <ControlTemplate.Resources>
                                                                <Style x:Key="{x:Type TextBlock}" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                                                    <Setter Property="Foreground" Value="White"/>
                                                                </Style>
                                                            </ControlTemplate.Resources>
                                                            <DockPanel Visibility="{Binding SelectedItem, Converter={StaticResource convNullToObject}, ConverterParameter={StaticResource CollapsedVisible}}" Background="Black" MaxWidth="300">
                                                                <DockPanel DockPanel.Dock="Top" Margin="5,5,5,0">
                                                                    <Image Source="{Binding SelectedItem.Item, Converter={StaticResource convItemToIcon}}" Width="64" Height="64" Margin="0,0,5,0"/>
                                                                    <TextBlock Text="{Binding SelectedItem.ItemName}" FontWeight="Bold" Foreground="Yellow" TextWrapping="Wrap" FontSize="24" Margin="2,0,0,0"/>
                                                                </DockPanel>
                                                                <TextBlock DockPanel.Dock="Top" Text="{Binding SelectedItem.ItemDescription}" TextWrapping="Wrap" TextAlignment="Left" Margin="5,5,5,0"/>
                                                                <ItemsControl ItemsSource="{Binding SelectedItem.ItemEffectDescriptionList}" ItemTemplateSelector="{StaticResource selItemEffectTemplate}" Margin="5,5,5,5">
                                                                    <ItemsControl.Resources>
                                                                        <DataTemplate x:Key="ItemSimpleEffectTemplate" DataType="{x:Type object:IPgItemSimpleEffect}">
                                                                            <TextBox Text="{Binding Description, Mode=OneWay}" IsReadOnly="True" BorderThickness="0" Foreground="White" Background="Transparent" TextWrapping="Wrap" IsHitTestVisible="False" VerticalAlignment="Center" Margin="5,1,0,1"/>
                                                                        </DataTemplate>
                                                                        <DataTemplate x:Key="ItemAttributeLinkTemplate" DataType="{x:Type object:IPgItemAttributeLink}">
                                                                            <TextBox Text="{Binding FriendlyNameAndEffect, Mode=OneWay}" IsReadOnly="True" BorderThickness="0" Foreground="White" Background="Transparent" TextWrapping="Wrap" IsHitTestVisible="False" VerticalAlignment="Center" Margin="5,1,0,1"/>
                                                                        </DataTemplate>
                                                                    </ItemsControl.Resources>
                                                                </ItemsControl>
                                                            </DockPanel>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Grid.Resources>
                                        <ComboBox ItemsSource="{Binding ItemList}" ItemTemplate="{StaticResource ItemNameTemplate}" SelectedIndex="{Binding SelectedItemIndex, Mode=OneWay}" ToolTip="{Binding Path=SelectedItem}" IsReadOnly="True" SelectionChanged="OnItemSelectionChanged" VerticalAlignment="Center"/>
                                    </Grid>
                                </DockPanel>
                                <ItemsControl DockPanel.Dock="Top" ItemsSource="{Binding SelectedItem.ItemEffectDescriptionList}" ItemTemplateSelector="{StaticResource selItemEffectTemplate}" Margin="5,5,5,0">
                                    <ItemsControl.Resources>
                                        <DataTemplate x:Key="ItemSimpleEffectTemplate" DataType="{x:Type object:IPgItemSimpleEffect}">
                                            <TextBox Text="{Binding Description, Mode=OneWay}" IsReadOnly="True" BorderThickness="0" TextWrapping="Wrap" IsHitTestVisible="False" VerticalAlignment="Center" Margin="0,1,0,1"/>
                                        </DataTemplate>
                                        <DataTemplate x:Key="ItemAttributeLinkTemplate" DataType="{x:Type object:IPgItemAttributeLink}">
                                            <TextBox Text="{Binding FriendlyNameAndEffect, Mode=OneWay}" IsReadOnly="True" BorderThickness="0" TextWrapping="Wrap" IsHitTestVisible="False" VerticalAlignment="Center" Margin="0,1,0,1"/>
                                        </DataTemplate>
                                    </ItemsControl.Resources>
                                </ItemsControl>
                                <ItemsControl DockPanel.Dock="Top" Visibility="{Binding HasEnhancement, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}" ItemsSource="{Binding EnhancementEffectDescriptionList}" ItemTemplateSelector="{StaticResource selItemEffectTemplate}" Margin="5,0,5,5">
                                    <ItemsControl.Resources>
                                        <DataTemplate x:Key="ItemAttributeLinkTemplate" DataType="{x:Type object:IPgItemAttributeLink}">
                                            <TextBox Text="{Binding FriendlyNameAndEffect, Mode=OneWay}" IsReadOnly="True" BorderThickness="0" TextWrapping="Wrap" IsHitTestVisible="False" VerticalAlignment="Center" Margin="0,1,0,1"/>
                                        </DataTemplate>
                                    </ItemsControl.Resources>
                                </ItemsControl>
                                <Expander Visibility="{Binding HasEnhancement, Converter={StaticResource convBooleanToObject}, ConverterParameter={StaticResource CollapsedVisible}}" Margin="5,5,5,5">
                                    <Expander.Header>
                                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                            <TextBlock>Enhancement points:</TextBlock>
                                            <TextBlock Text="{Binding ConsumedEnhancementPoints}" Margin="5,0,0,0"/>
                                        </StackPanel>
                                    </Expander.Header>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition/>
                                            <RowDefinition/>
                                            <RowDefinition/>
                                            <RowDefinition/>
                                        </Grid.RowDefinitions>
                                        <Button Grid.Column="0" Grid.Row="0" Command="{StaticResource IncrementEnhancementCommand}" VerticalAlignment="Center" Width="20" Margin="0,5,0,0">+</Button>
                                        <Button Grid.Column="1" Grid.Row="0" Command="{StaticResource DecrementEnhancementCommand}" VerticalAlignment="Center" Width="20" Margin="2,5,0,0">-</Button>
                                        <TextBlock Grid.Column="2" Grid.Row="0" VerticalAlignment="Center" Margin="5,5,10,0">Cold</TextBlock>
                                        <Button Grid.Column="0" Grid.Row="1" Command="{StaticResource IncrementEnhancementCommand}" VerticalAlignment="Center" Width="20" Margin="0,5,0,0">+</Button>
                                        <Button Grid.Column="1" Grid.Row="1" Command="{StaticResource DecrementEnhancementCommand}" VerticalAlignment="Center" Width="20" Margin="2,5,0,0">-</Button>
                                        <TextBlock Grid.Column="2" Grid.Row="1" VerticalAlignment="Center" Margin="5,5,10,0">Darkness</TextBlock>
                                        <Button Grid.Column="0" Grid.Row="2" Command="{StaticResource IncrementEnhancementCommand}" VerticalAlignment="Center" Width="20" Margin="0,5,0,0">+</Button>
                                        <Button Grid.Column="1" Grid.Row="2" Command="{StaticResource DecrementEnhancementCommand}" VerticalAlignment="Center" Width="20" Margin="2,5,0,0">-</Button>
                                        <TextBlock Grid.Column="2" Grid.Row="2" VerticalAlignment="Center" Margin="5,5,10,0">Electricity</TextBlock>
                                        <Button Grid.Column="3" Grid.Row="0" Command="{StaticResource IncrementEnhancementCommand}" VerticalAlignment="Center" Width="20" Margin="0,5,0,0">+</Button>
                                        <Button Grid.Column="4" Grid.Row="0" Command="{StaticResource DecrementEnhancementCommand}" VerticalAlignment="Center" Width="20" Margin="2,5,0,0">-</Button>
                                        <TextBlock Grid.Column="5" Grid.Row="0" VerticalAlignment="Center" Margin="5,5,0,0">Fire</TextBlock>
                                        <Button Grid.Column="3" Grid.Row="1" Command="{StaticResource IncrementEnhancementCommand}" VerticalAlignment="Center" Width="20" Margin="0,5,0,0">+</Button>
                                        <Button Grid.Column="4" Grid.Row="1" Command="{StaticResource DecrementEnhancementCommand}" VerticalAlignment="Center" Width="20" Margin="2,5,0,0">-</Button>
                                        <TextBlock Grid.Column="5" Grid.Row="1" VerticalAlignment="Center" Margin="5,5,0,0">Nature</TextBlock>
                                        <Button Grid.Column="3" Grid.Row="2" Command="{StaticResource IncrementEnhancementCommand}" VerticalAlignment="Center" Width="20" Margin="0,5,0,0">+</Button>
                                        <Button Grid.Column="4" Grid.Row="2" Command="{StaticResource DecrementEnhancementCommand}" VerticalAlignment="Center" Width="20" Margin="2,5,0,0">-</Button>
                                        <TextBlock Grid.Column="5" Grid.Row="2" VerticalAlignment="Center" Margin="5,5,0,0">Psychic</TextBlock>
                                    </Grid>
                                </Expander>
                            </DockPanel>
                            <Grid DockPanel.Dock="Left" Width="400" Margin="10,0,10,0">
                                <Grid VerticalAlignment="Top">
                                    <TextBlock Text="To add mods, click this button." TextAlignment="Right" VerticalAlignment="Center" Margin="0,1,0,0"/>
                                    <Button Width="0" VerticalAlignment="Center"/>
                                </Grid>
                                <ItemsControl ItemsSource="{Binding ModList}" ItemTemplate="{StaticResource ModTemplate}" VerticalAlignment="Top"/>
                            </Grid>
                            <Button DockPanel.Dock="Left" Command="{StaticResource AddModCommand}" VerticalAlignment="Top" Width="60" Margin="0,0,10,10">Add Mod</Button>
                        </DockPanel>
                    </DockPanel>
                </ItemContainerTemplate>
            </TabControl.ContentTemplate>
        </TabControl>
        <Grid Margin="0,10,5,0" HorizontalAlignment="Center">
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <ItemsControl Grid.Column="0" Grid.Row="0" ItemsSource="{Binding AbilitySlot1List}" ItemTemplateSelector="{StaticResource selAbilityTemplate}" VerticalAlignment="Center" Margin="5,0,0,5">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <VirtualizingStackPanel Orientation="Horizontal"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
            <ItemsControl Grid.Column="0" Grid.Row="1" ItemsSource="{Binding AbilitySlot2List}" ItemTemplateSelector="{StaticResource selAbilityTemplate}" VerticalAlignment="Center" Margin="5,0,0,5">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <VirtualizingStackPanel Orientation="Horizontal"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
        </Grid>
    </DockPanel>
</Window>
